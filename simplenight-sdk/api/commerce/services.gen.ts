// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { PostAuthLoginData, PostAuthLoginResponse, PostAuthLogoutData, PostAuthLogoutResponse, PostAuthRefreshTokensData, PostAuthRefreshTokensResponse, PostAuthForgotPasswordData, PostAuthForgotPasswordResponse, PostAuthResetPasswordData, PostAuthResetPasswordResponse, PostAuthSendVerificationEmailData, PostAuthSendVerificationEmailResponse, PostAuthSendVerificationEmailResetPasswordData, PostAuthSendVerificationEmailResetPasswordResponse, PostAuthVerifyEmailData, PostAuthVerifyEmailResponse, GetBookingsUserData, GetBookingsUserResponse, PostBookingsFindData, PostBookingsFindResponse, GetBookingsByBookingIdData, GetBookingsByBookingIdResponse, PostBookingsByBookingIdCancelData, PostBookingsByBookingIdCancelResponse, PostBookingsByBookingIdItemsByBookingItemIdCancelData, PostBookingsByBookingIdItemsByBookingItemIdCancelResponse, PostCartData, PostCartResponse, GetCartByCartIdData, GetCartByCartIdResponse, PatchCartByCartIdData, PatchCartByCartIdResponse, DeleteCartByCartIdData, DeleteCartByCartIdResponse, PostCartByCartIdItemsData, PostCartByCartIdItemsResponse, GetCartByCartIdItemsByCartItemIdData, GetCartByCartIdItemsByCartItemIdResponse, PatchCartByCartIdItemsByCartItemIdData, PatchCartByCartIdItemsByCartItemIdResponse, DeleteCartByCartIdItemsByCartItemIdData, DeleteCartByCartIdItemsByCartItemIdResponse, PostCheckoutData, PostCheckoutResponse, PostCheckoutByBookingIdData, PostCheckoutByBookingIdResponse, GetConfigData, GetConfigResponse, GetConfigWebData, GetConfigWebResponse, GetConfigMobileData, GetConfigMobileResponse, PostLocationsSearchData, PostLocationsSearchResponse, GetLocationsByLocationIdData, GetLocationsByLocationIdResponse, PostProductsSearchFlightsData, PostProductsSearchFlightsResponse, PostProductsSearchHotelsData, PostProductsSearchHotelsResponse, PostProductsSearchCarRentalData, PostProductsSearchCarRentalResponse, PostProductsSearchTransportationData, PostProductsSearchTransportationResponse, PostProductsSearchThingsToDoData, PostProductsSearchThingsToDoResponse, PostProductsSearchShowsEventsData, PostProductsSearchShowsEventsResponse, PostProductsSearchDiningData, PostProductsSearchDiningResponse, PostProductsSearchParkingData, PostProductsSearchParkingResponse, PostProductsSearchByCategorySlugData, PostProductsSearchByCategorySlugResponse, PostProductsSearchPollBySearchIdData, PostProductsSearchPollBySearchIdResponse, GetProductsByProductIdData, GetProductsByProductIdResponse, GetProductsByProductIdSuggestionsData, GetProductsByProductIdSuggestionsResponse, GetProductsByProductIdSeatmapData, GetProductsByProductIdSeatmapResponse, PostUsersData, PostUsersResponse, GetUsersResponse, PatchUsersData, PatchUsersResponse, DeleteUsersResponse } from './types.gen';

export class AuthService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Login
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postAuthLogin(data: PostAuthLoginData): CancelablePromise<PostAuthLoginResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/auth/login',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Invalid email or password'
            }
        });
    }
    
    /**
     * Logout
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postAuthLogout(data: PostAuthLogoutData): CancelablePromise<PostAuthLogoutResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/auth/logout',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                404: 'Not found'
            }
        });
    }
    
    /**
     * Refresh auth tokens
     * @param data The data for the request.
     * @param data.requestBody
     * @returns AuthTokens OK
     * @throws ApiError
     */
    public postAuthRefreshTokens(data: PostAuthRefreshTokensData): CancelablePromise<PostAuthRefreshTokensResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/auth/refresh-tokens',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Forgot password
     * An email will be sent to reset password.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postAuthForgotPassword(data: PostAuthForgotPasswordData): CancelablePromise<PostAuthForgotPasswordResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/auth/forgot-password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                403: 'Forbidden',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Reset password
     * @param data The data for the request.
     * @param data.token The reset password token
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postAuthResetPassword(data: PostAuthResetPasswordData): CancelablePromise<PostAuthResetPasswordResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/auth/reset-password',
            query: {
                token: data.token
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Password reset failed'
            }
        });
    }
    
    /**
     * Send verification email
     * An email with a link, will be sent to verify email address.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postAuthSendVerificationEmail(data: PostAuthSendVerificationEmailData): CancelablePromise<PostAuthSendVerificationEmailResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/auth/send-verification-email',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                404: 'Not found'
            }
        });
    }
    
    /**
     * Send verification email with reset password also
     * An email with a link, will be sent to verify email address and reset password.
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postAuthSendVerificationEmailResetPassword(data: PostAuthSendVerificationEmailResetPasswordData): CancelablePromise<PostAuthSendVerificationEmailResetPasswordResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/auth/send-verification-email-reset-password',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                404: 'Not found'
            }
        });
    }
    
    /**
     * Verify email
     * @param data The data for the request.
     * @param data.token The verify email token
     * @returns unknown OK
     * @throws ApiError
     */
    public postAuthVerifyEmail(data: PostAuthVerifyEmailData): CancelablePromise<PostAuthVerifyEmailResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/auth/verify-email',
            query: {
                token: data.token
            },
            errors: {
                401: 'verify email failed'
            }
        });
    }
    
}

export class BookingsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get user bookings
     * Get all bookings for current logged in user
     * @param data The data for the request.
     * @param data.currency Return booking and booking items amounts in different currency
     * @param data.status Booking status
     * @param data.startDate Bookings created from start_date
     * @param data.endDate Bookings created until end_date
     * @param data.sort Sort by field:desc/asc (ex. created_at:asc)
     * @param data.limit Maximum number of bookings
     * @param data.page Page number
     * @param data.include Booking comma delimited fields to include in response
     * @param data.exclude Booking comma delimited fields to exclude in response
     * @returns unknown OK
     * @throws ApiError
     */
    public getBookingsUser(data: GetBookingsUserData = {}): CancelablePromise<GetBookingsUserResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/bookings/user',
            query: {
                currency: data.currency,
                status: data.status,
                start_date: data.startDate,
                end_date: data.endDate,
                sort: data.sort,
                limit: data.limit,
                page: data.page,
                include: data.include,
                exclude: data.exclude
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Find a booking
     * Find a booking by booking_ref and last_name
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.currency Return booking and booking items amounts in different currency
     * @returns Booking OK
     * @throws ApiError
     */
    public postBookingsFind(data: PostBookingsFindData): CancelablePromise<PostBookingsFindResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/bookings/find',
            query: {
                currency: data.currency
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Get booking details
     * Get a booking details by ID
     * @param data The data for the request.
     * @param data.bookingId Booking ID
     * @param data.currency Return booking and booking items amounts in different currency
     * @returns Booking OK
     * @throws ApiError
     */
    public getBookingsByBookingId(data: GetBookingsByBookingIdData): CancelablePromise<GetBookingsByBookingIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/bookings/{bookingId}',
            path: {
                bookingId: data.bookingId
            },
            query: {
                currency: data.currency
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Cancel an entire booking
     * Cancel an entire booking by ID
     * @param data The data for the request.
     * @param data.bookingId Booking ID
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postBookingsByBookingIdCancel(data: PostBookingsByBookingIdCancelData): CancelablePromise<PostBookingsByBookingIdCancelResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/bookings/{bookingId}/cancel',
            path: {
                bookingId: data.bookingId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Cancel a single booking item
     * Cancel a single booking item by booking ID and item ID
     * @param data The data for the request.
     * @param data.bookingId Booking ID
     * @param data.bookingItemId Item ID
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postBookingsByBookingIdItemsByBookingItemIdCancel(data: PostBookingsByBookingIdItemsByBookingItemIdCancelData): CancelablePromise<PostBookingsByBookingIdItemsByBookingItemIdCancelResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/bookings/{bookingId}/items/{bookingItemId}/cancel',
            path: {
                bookingId: data.bookingId,
                bookingItemId: data.bookingItemId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found'
            }
        });
    }
    
}

export class CartService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Create a cart
     * Create a cart and optionally add items to cart and/or customer info
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.currency Return cart and cart items amounts in different currency
     * @returns Cart OK
     * @throws ApiError
     */
    public postCart(data: PostCartData): CancelablePromise<PostCartResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/cart',
            query: {
                currency: data.currency
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Get a cart
     * Get a cart and its cart items
     * @param data The data for the request.
     * @param data.cartId Cart ID
     * @param data.currency Return cart and cart items amounts in different currency
     * @returns Cart OK
     * @throws ApiError
     */
    public getCartByCartId(data: GetCartByCartIdData): CancelablePromise<GetCartByCartIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/cart/{cartId}',
            path: {
                cartId: data.cartId
            },
            query: {
                currency: data.currency
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Update a cart
     * Update cart currency or customer info
     * @param data The data for the request.
     * @param data.cartId Cart ID
     * @param data.requestBody
     * @param data.currency Return cart and cart items amounts in different currency
     * @returns Cart OK
     * @throws ApiError
     */
    public patchCartByCartId(data: PatchCartByCartIdData): CancelablePromise<PatchCartByCartIdResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/cart/{cartId}',
            path: {
                cartId: data.cartId
            },
            query: {
                currency: data.currency
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Delete a cart
     * Delete a cart and its cart items
     * @param data The data for the request.
     * @param data.cartId Cart ID
     * @returns unknown No content
     * @throws ApiError
     */
    public deleteCartByCartId(data: DeleteCartByCartIdData): CancelablePromise<DeleteCartByCartIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/cart/{cartId}',
            path: {
                cartId: data.cartId
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Add an item to cart
     * Add an item to cart
     * @param data The data for the request.
     * @param data.cartId Cart ID
     * @param data.requestBody
     * @param data.currency Return cart and cart items amounts in different currency
     * @returns Cart OK
     * @throws ApiError
     */
    public postCartByCartIdItems(data: PostCartByCartIdItemsData): CancelablePromise<PostCartByCartIdItemsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/cart/{cartId}/items',
            path: {
                cartId: data.cartId
            },
            query: {
                currency: data.currency
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Get a cart item
     * Get a cart item
     * @param data The data for the request.
     * @param data.cartId Cart ID
     * @param data.cartItemId Cart Item ID
     * @param data.currency Return cart and cart items amounts in different currency
     * @returns CartItem OK
     * @throws ApiError
     */
    public getCartByCartIdItemsByCartItemId(data: GetCartByCartIdItemsByCartItemIdData): CancelablePromise<GetCartByCartIdItemsByCartItemIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/cart/{cartId}/items/{cartItemId}',
            path: {
                cartId: data.cartId,
                cartItemId: data.cartItemId
            },
            query: {
                currency: data.currency
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Update a cart item
     * Update a cart item
     * @param data The data for the request.
     * @param data.cartId Cart ID
     * @param data.cartItemId Cart Item ID
     * @param data.requestBody
     * @param data.currency Return cart and cart items amounts in different currency
     * @returns Cart OK
     * @throws ApiError
     */
    public patchCartByCartIdItemsByCartItemId(data: PatchCartByCartIdItemsByCartItemIdData): CancelablePromise<PatchCartByCartIdItemsByCartItemIdResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/cart/{cartId}/items/{cartItemId}',
            path: {
                cartId: data.cartId,
                cartItemId: data.cartItemId
            },
            query: {
                currency: data.currency
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Delete a cart item
     * Delete a cart item
     * @param data The data for the request.
     * @param data.cartId Cart ID
     * @param data.cartItemId Cart Item ID
     * @param data.currency Return cart and cart items amounts in different currency
     * @returns Cart OK
     * @throws ApiError
     */
    public deleteCartByCartIdItemsByCartItemId(data: DeleteCartByCartIdItemsByCartItemIdData): CancelablePromise<DeleteCartByCartIdItemsByCartItemIdResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/cart/{cartId}/items/{cartItemId}',
            path: {
                cartId: data.cartId,
                cartItemId: data.cartItemId
            },
            query: {
                currency: data.currency
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found'
            }
        });
    }
    
}

export class CheckoutService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Checkout
     * Checkout
     * @param data The data for the request.
     * @param data.requestBody
     * @returns Checkout OK
     * @throws ApiError
     */
    public postCheckout(data: PostCheckoutData): CancelablePromise<PostCheckoutResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/checkout',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Resume checkout
     * Resume checkout process, if returning from an external payment URL (such as 3DS, hosted payment page, wallet, QR code, ...)
     * @param data The data for the request.
     * @param data.bookingId Booking ID
     * @returns Booking OK
     * @throws ApiError
     */
    public postCheckoutByBookingId(data: PostCheckoutByBookingIdData): CancelablePromise<PostCheckoutByBookingIdResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/checkout/{bookingId}',
            path: {
                bookingId: data.bookingId
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found'
            }
        });
    }
    
}

export class ConfigService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get config
     * Get tenant public configuration by tenant id or hostname
     * @param data The data for the request.
     * @param data.id Tenant ID
     * @param data.hostname Hostname
     * @param data.language Language (for localized fields)
     * @returns unknown OK
     * @throws ApiError
     */
    public getConfig(data: GetConfigData = {}): CancelablePromise<GetConfigResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/config',
            query: {
                id: data.id,
                hostname: data.hostname,
                language: data.language
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Get web config
     * Get tenant public configuration by tenant id or hostname for web
     * @param data The data for the request.
     * @param data.id Tenant ID
     * @param data.hostname Hostname
     * @param data.language Language (for localized fields)
     * @returns unknown OK
     * @throws ApiError
     */
    public getConfigWeb(data: GetConfigWebData = {}): CancelablePromise<GetConfigWebResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/config/web',
            query: {
                id: data.id,
                hostname: data.hostname,
                language: data.language
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Get mobile config
     * Get tenant public configuration by tenant id or hostname for mobile
     * @param data The data for the request.
     * @param data.id Tenant ID
     * @param data.hostname Hostname
     * @param data.language Language (for localized fields)
     * @returns unknown OK
     * @throws ApiError
     */
    public getConfigMobile(data: GetConfigMobileData = {}): CancelablePromise<GetConfigMobileResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/config/mobile',
            query: {
                id: data.id,
                hostname: data.hostname,
                language: data.language
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found'
            }
        });
    }
    
}

export class LocationsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Search locations
     * Search by keyword and location type to retrieve locations with geolocations
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.language Language (for localized fields)
     * @returns unknown OK
     * @throws ApiError
     */
    public postLocationsSearch(data: PostLocationsSearchData): CancelablePromise<PostLocationsSearchResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/locations/search',
            query: {
                language: data.language
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Get location details
     * Get location details based on locationId
     * @param data The data for the request.
     * @param data.locationId Location ID
     * @returns Location OK
     * @throws ApiError
     */
    public getLocationsByLocationId(data: GetLocationsByLocationIdData): CancelablePromise<GetLocationsByLocationIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/locations/{locationId}',
            path: {
                locationId: data.locationId
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found'
            }
        });
    }
    
}

export class ProductsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Search flights
     * Search flights from all suppliers
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.language Language (for localized fields)
     * @param data.currency Currency (for prices)
     * @param data.uom Unit of measuring distance (mi, km)
     * @returns unknown OK
     * @throws ApiError
     */
    public postProductsSearchFlights(data: PostProductsSearchFlightsData): CancelablePromise<PostProductsSearchFlightsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/products/search/flights',
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Search hotels
     * Search hotels from all suppliers
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.language Language (for localized fields)
     * @param data.currency Currency (for prices)
     * @param data.uom Unit of measuring distance (mi, km)
     * @returns unknown OK
     * @throws ApiError
     */
    public postProductsSearchHotels(data: PostProductsSearchHotelsData): CancelablePromise<PostProductsSearchHotelsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/products/search/hotels',
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Search cars
     * Search cars from all suppliers
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.language Language (for localized fields)
     * @param data.currency Currency (for prices)
     * @param data.uom Unit of measuring distance (mi, km)
     * @returns unknown OK
     * @throws ApiError
     */
    public postProductsSearchCarRental(data: PostProductsSearchCarRentalData): CancelablePromise<PostProductsSearchCarRentalResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/products/search/car-rental',
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Search transportation
     * Search transportation from all suppliers
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.language Language (for localized fields)
     * @param data.currency Currency (for prices)
     * @param data.uom Unit of measuring distance (mi, km)
     * @returns unknown OK
     * @throws ApiError
     */
    public postProductsSearchTransportation(data: PostProductsSearchTransportationData): CancelablePromise<PostProductsSearchTransportationResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/products/search/transportation',
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Search things to do
     * Search things to do from all suppliers
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.language Language (for localized fields)
     * @param data.currency Currency (for prices)
     * @param data.uom Unit of measuring distance (mi, km)
     * @returns unknown OK
     * @throws ApiError
     */
    public postProductsSearchThingsToDo(data: PostProductsSearchThingsToDoData): CancelablePromise<PostProductsSearchThingsToDoResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/products/search/things-to-do',
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Search shows & events
     * Search shows & events from all suppliers
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.language Language (for localized fields)
     * @param data.currency Currency (for prices)
     * @param data.uom Unit of measuring distance (mi, km)
     * @returns unknown OK
     * @throws ApiError
     */
    public postProductsSearchShowsEvents(data: PostProductsSearchShowsEventsData): CancelablePromise<PostProductsSearchShowsEventsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/products/search/shows-events',
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Search dining
     * Search dining from all suppliers
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.language Language (for localized fields)
     * @param data.currency Currency (for prices)
     * @param data.uom Unit of measuring distance (mi, km)
     * @returns unknown OK
     * @throws ApiError
     */
    public postProductsSearchDining(data: PostProductsSearchDiningData): CancelablePromise<PostProductsSearchDiningResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/products/search/dining',
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Search parking
     * Search parking from all suppliers
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.language Language (for localized fields)
     * @param data.currency Currency (for prices)
     * @param data.uom Unit of measuring distance (mi, km)
     * @returns unknown OK
     * @throws ApiError
     */
    public postProductsSearchParking(data: PostProductsSearchParkingData): CancelablePromise<PostProductsSearchParkingResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/products/search/parking',
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Search by category slug
     * Search products in a specific category slug
     * @param data The data for the request.
     * @param data.categorySlug Category slug
     * @param data.requestBody
     * @param data.language Language (for localized fields)
     * @param data.currency Currency (for prices)
     * @param data.uom Unit of measuring distance (mi, km)
     * @returns unknown OK
     * @throws ApiError
     */
    public postProductsSearchByCategorySlug(data: PostProductsSearchByCategorySlugData): CancelablePromise<PostProductsSearchByCategorySlugResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/products/search/{categorySlug}',
            path: {
                categorySlug: data.categorySlug
            },
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Poll results by searchId
     * Get results for a previous searchId
     * @param data The data for the request.
     * @param data.searchId Search ID
     * @param data.requestBody
     * @returns unknown OK
     * @throws ApiError
     */
    public postProductsSearchPollBySearchId(data: PostProductsSearchPollBySearchIdData): CancelablePromise<PostProductsSearchPollBySearchIdResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/products/search/poll/{searchId}',
            path: {
                searchId: data.searchId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Get product details
     * Get product details (optionally retrieve seatmap, rooms, ...)
     * @param data The data for the request.
     * @param data.productId Product ID
     * @param data.language Language (for localized fields)
     * @param data.startDate Start date (YYYY-MM-DD hh:mm:00)
     * @param data.endDate Start date (YYYY-MM-DD hh:mm:00)
     * @param data.currency Currency (for prices)
     * @param data.uom Unit of measuring distance (mi, km)
     * @param data.details Fetch product details from supplier
     * @param data.availability Fetch availability from supplier (or reprice for flights)
     * @param data.seatmaps Fetch seatmaps from supplier (for flights)
     * @param data.availabilityDate Check availability for date (YYYY-MM-DD HH:mm:ss)
     * @param data.availabilityAdults Check availability for number of adults
     * @param data.availabilityChildren Check availability for number of children
     * @param data.bookingQuestions Booking questions to retrieve quote (for parking)
     * @param data.include Comma delimited fields to include in response
     * @param data.exclude Comma delimited fields to exclude from response
     * @param data.raw Return raw product (dev only)
     * @returns Product OK
     * @throws ApiError
     */
    public getProductsByProductId(data: GetProductsByProductIdData): CancelablePromise<GetProductsByProductIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/products/{productId}',
            path: {
                productId: data.productId
            },
            query: {
                language: data.language,
                start_date: data.startDate,
                end_date: data.endDate,
                currency: data.currency,
                uom: data.uom,
                details: data.details,
                availability: data.availability,
                seatmaps: data.seatmaps,
                availability_date: data.availabilityDate,
                availability_adults: data.availabilityAdults,
                availability_children: data.availabilityChildren,
                booking_questions: data.bookingQuestions,
                include: data.include,
                exclude: data.exclude,
                raw: data.raw
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Get similar products
     * Get similar product suggestions
     * @param data The data for the request.
     * @param data.productId Product ID
     * @param data.language Language (for localized fields)
     * @param data.currency Currency (for prices)
     * @param data.uom Unit of measuring distance (mi, km)
     * @param data.limit Max number of suggestions (default 3)
     * @returns unknown OK
     * @throws ApiError
     */
    public getProductsByProductIdSuggestions(data: GetProductsByProductIdSuggestionsData): CancelablePromise<GetProductsByProductIdSuggestionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/products/{productId}/suggestions',
            path: {
                productId: data.productId
            },
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom,
                limit: data.limit
            },
            errors: {
                401: 'Unauthorized',
                403: 'Forbidden',
                404: 'Not found'
            }
        });
    }
    
    /**
     * Get product seatmap html
     * Get product seatmap html
     * @param data The data for the request.
     * @param data.productId Product ID
     * @returns string OK
     * @throws ApiError
     */
    public getProductsByProductIdSeatmap(data: GetProductsByProductIdSeatmapData): CancelablePromise<GetProductsByProductIdSeatmapResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/products/{productId}/seatmap',
            path: {
                productId: data.productId
            }
        });
    }
    
}

export class UsersService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Register (Create User)
     * @param data The data for the request.
     * @param data.requestBody
     * @returns User Created
     * @throws ApiError
     */
    public postUsers(data: PostUsersData): CancelablePromise<PostUsersResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/users',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Email already taken'
            }
        });
    }
    
    /**
     * Get Current User
     * @returns User OK
     * @throws ApiError
     */
    public getUsers(): CancelablePromise<GetUsersResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/users',
            errors: {
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Update Current User
     * @param data The data for the request.
     * @param data.requestBody
     * @returns User OK
     * @throws ApiError
     */
    public patchUsers(data: PatchUsersData): CancelablePromise<PatchUsersResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/users',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized'
            }
        });
    }
    
    /**
     * Delete Current User
     * @returns void No content
     * @throws ApiError
     */
    public deleteUsers(): CancelablePromise<DeleteUsersResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/users',
            errors: {
                401: 'Unauthorized'
            }
        });
    }
    
}