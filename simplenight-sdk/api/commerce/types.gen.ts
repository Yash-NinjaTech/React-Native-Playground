// This file is auto-generated by @hey-api/openapi-ts

export type Company = {
    id?: string;
    name?: string;
    status?: 'Active' | 'Inactive';
};

export type status = 'Active' | 'Inactive';

export type Tenant = {
    id?: string;
    company_id?: string;
    name?: string;
    slug?: string;
    url?: string;
    status?: 'Active' | 'Inactive';
    /**
     * Tenant access public or restricted to logged in users only
     */
    login?: 'Public' | 'Restricted';
    /**
     * Tenant sign up public or restricted to certain domains or emails only
     */
    register?: 'Public' | 'Restricted';
    /**
     * Tenant sign up restricted to a list of domains or emails
     */
    register_restrictions?: {
        [key: string]: unknown;
    } | null;
    /**
     * Allow booking on supplier site. If False, bookings will be mocked without real supplier calls
     */
    allow_booking_on_supplier?: boolean;
};

/**
 * Tenant access public or restricted to logged in users only
 */
export type login = 'Public' | 'Restricted';

/**
 * Tenant sign up public or restricted to certain domains or emails only
 */
export type register = 'Public' | 'Restricted';

export type ApiKey = {
    id?: string;
    /**
     * Tenant ID
     */
    tenant_id?: string;
    /**
     * Name
     */
    name?: string;
    /**
     * Status
     */
    status?: 'Active' | 'Inactive';
    /**
     * Key used only for Web WL or for Mobile App or for API direct access
     */
    scope?: 'Api' | 'Web' | 'Mobile';
    /**
     * Secret key
     */
    hash_key?: string;
    /**
     * Public key
     */
    text_key?: string;
    /**
     * Usage log by day
     */
    usage?: {
        [key: string]: unknown;
    } | null;
    /**
     * Usage limit
     */
    usage_limit?: number;
};

/**
 * Key used only for Web WL or for Mobile App or for API direct access
 */
export type scope = 'Api' | 'Web' | 'Mobile';

export type ConfigWeb = {
    id?: string;
    tenant_id?: string;
    name?: string;
    /**
     * Localized
     */
    slogan?: string;
    phone_prefix?: string;
    phone_number?: string;
    email?: string;
    /**
     * Social media URLs
     */
    social?: {
        [key: string]: unknown;
    };
    logo?: string;
    icon?: string;
    /**
     * Colors
     */
    colors?: {
        [key: string]: unknown;
    };
    /**
     * Background images
     */
    images?: {
        [key: string]: unknown;
    };
    /**
     * Default language
     */
    language?: string;
    /**
     * Available translations
     */
    languages?: string;
    /**
     * Default currency
     */
    currency?: string;
    /**
     * Available currencies
     */
    currencies?: string;
    /**
     * Default country
     */
    country?: string;
    /**
     * Default metric system unit - mi/km
     */
    distance?: string;
    /**
     * Terms page (localized content)
     */
    terms?: string;
    /**
     * Privacy page (localized content)
     */
    privacy?: {
        [key: string]: unknown;
    };
    /**
     * Google Recaptcha site key
     */
    recaptcha_site_key?: string | null;
};

export type ConfigMobile = {
    id?: string;
    tenant_id?: string;
    name?: string;
    /**
     * Localized
     */
    slogan?: string;
    phone_prefix?: string;
    phone_number?: string;
    email?: string;
    /**
     * Social media URLs
     */
    social?: {
        [key: string]: unknown;
    };
    logo?: string;
    icon?: string;
    /**
     * Colors
     */
    colors?: {
        [key: string]: unknown;
    };
    /**
     * Background images
     */
    images?: {
        [key: string]: unknown;
    };
    /**
     * Default language
     */
    language?: string;
    /**
     * Available translations
     */
    languages?: string;
    /**
     * Default currency
     */
    currency?: string;
    /**
     * Available currencies
     */
    currencies?: string;
    /**
     * Default country
     */
    country?: string;
    /**
     * Default metric system unit - mi/km
     */
    distance?: string;
    /**
     * Terms page (localized URL)
     */
    terms?: {
        [key: string]: unknown;
    };
    /**
     * Privacy page (localized URL)
     */
    privacy?: {
        [key: string]: unknown;
    };
};

export type Category = {
    id?: string;
    tenant_id?: string;
    /**
     * Localized
     */
    name?: string;
    slug?: string;
    icon?: string | null;
    sort?: number;
    status?: 'Active' | 'Inactive';
    product_attributes?: Array<ProductAttribute> | null;
    variant_attributes?: Array<ProductAttribute> | null;
};

export type ProductAttribute = {
    id?: string;
    category_id?: string;
    name?: string;
    slug?: string;
    type?: 'Short Text' | 'Long Text' | 'Rich Text' | 'Boolean' | 'Number' | 'Date' | 'Time' | 'Single Select' | 'Multi Select';
    options?: Array<(string)>;
    required?: boolean;
    localized?: boolean;
    filterable?: boolean;
    sortable?: boolean;
    supplier_mapping?: Array<(string)> | null;
};

export type type = 'Short Text' | 'Long Text' | 'Rich Text' | 'Boolean' | 'Number' | 'Date' | 'Time' | 'Single Select' | 'Multi Select';

export type VariantAttribute = {
    id?: string;
    category_id?: string;
    name?: string;
    slug?: string;
    type?: 'Short Text' | 'Long Text' | 'Rich Text' | 'Boolean' | 'Number' | 'Date' | 'Time' | 'Single Select' | 'Multi Select';
    options?: Array<(string)>;
    required?: boolean;
    localized?: boolean;
    filterable?: boolean;
    sortable?: boolean;
    supplier_mapping?: Array<(string)>;
};

export type Supplier = {
    id?: string;
    tenant_id?: string;
    /**
     * Localized
     */
    name?: string;
    slug?: string;
    status?: 'Active' | 'Inactive';
    payment_method?: 'Virtual Card' | 'Virtual Card On Request' | 'Customer Card' | 'Free' | 'Offline' | null;
    /**
     * Credentials object
     */
    credentials?: {
        [key: string]: unknown;
    };
    /**
     * Cache (token, ...)
     */
    cache?: {
        [key: string]: unknown;
    };
};

export type payment_method = 'Virtual Card' | 'Virtual Card On Request' | 'Customer Card' | 'Free' | 'Offline';

export type SupplierCategory = {
    id?: string;
    tenant_id?: string;
    supplier_id?: string;
    category_id?: string;
    status?: 'Active' | 'Inactive';
    type?: 'Net' | 'Commissionable';
    markup?: number;
    discount?: number;
};

export type type2 = 'Net' | 'Commissionable';

export type Location = {
    id?: string;
    /**
     * Location name
     */
    name?: string;
    /**
     * Location address
     */
    address?: string | null;
    /**
     * Location type(s)
     */
    type?: string | null;
    /**
     * Airport code (if applies)
     */
    code?: string | null;
    /**
     * Location latitude
     */
    latitude?: number | null;
    /**
     * Location longitude
     */
    longitude?: number | null;
    /**
     * Location image
     */
    image?: string;
};

export type FeeCategory = 'RESORT_FEE' | 'DEPOSIT' | 'PET_FEE' | 'PARKING_FEE' | 'CLEANING_FEE' | 'BREAKFAST_FEE' | 'EXTRA_BED_FEE' | 'SERVICE_FEE' | 'AIRPORT_SHUTTLE_FEE' | 'INTERNET_FEE' | 'FACILITIES_FEE' | 'UTILITY_FEE' | 'TAX' | 'OTHER';

export type FeeBreakdown = {
    category: FeeCategory;
    total_amount?: number;
    mandatory: boolean;
};

export type Product = {
    /**
     * Internal product ID
     */
    id?: string | null;
    /**
     * Static product ID
     */
    static_id?: string | null;
    /**
     * Supplier product ID
     */
    ids?: string | null;
    /**
     * Supplier slug
     */
    supplier?: string | null;
    /**
     * Supplier mode
     */
    supplier_env?: 'sandbox' | 'production' | null;
    /**
     * Category slug
     */
    category?: string | null;
    /**
     * Sort index
     */
    index?: number | null;
    /**
     * Product name
     */
    name?: string | null;
    /**
     * Product description
     */
    description?: string | null;
    /**
     * Product address
     */
    address?: string | null;
    /**
     * Product latitude
     */
    latitude?: number | null;
    /**
     * Product longitude
     */
    longitude?: number | null;
    /**
     * Distance from search location
     */
    distance?: number | null;
    /**
     * Product unit of measure (km/mi)
     */
    distance_uom?: string | null;
    /**
     * Image urls array
     */
    images?: Array<(string)> | null;
    /**
     * Supplier tax amount
     */
    supplier_tax?: number | null;
    /**
     * Supplier price amount
     */
    supplier_price?: number | null;
    /**
     * Supplier currency
     */
    supplier_currency?: string | null;
    fee_breakdown?: Array<FeeBreakdown>;
    /**
     * Total tax amount
     */
    tax?: number | null;
    /**
     * Total price amount
     */
    price?: number | null;
    pay_at_property?: number | null;
    /**
     * Currency
     */
    currency?: string | null;
    /**
     * Price description
     */
    price_description?: string | null;
    /**
     * Free Cancelation (true/false)
     */
    free_cancellation?: boolean | null;
    /**
     * Rating
     */
    rating?: number | null;
    /**
     * Reviews number
     */
    reviews?: number | null;
    /**
     * Product status (Active/Inactive/Expired)
     */
    status?: string | null;
    /**
     * Custom category attributes
     */
    attributes?: {
        [key: string]: unknown;
    } | null;
    flights?: Array<ProductFlight> | null;
    rooms?: Array<ProductRoom> | null;
    variants?: Array<ProductVariant> | null;
    tickets?: Array<ProductTicket> | null;
};

/**
 * Supplier mode
 */
export type supplier_env = 'sandbox' | 'production';

export type ProductVariant = {
    /**
     * Internal variant ID
     */
    id?: string | null;
    /**
     * Supplier variant ID
     */
    ids?: string | null;
    /**
     * Variant name
     */
    name?: string;
    /**
     * Variant description
     */
    description?: number;
    /**
     * Image urls array
     */
    images?: Array<(string)> | null;
    /**
     * Supplier tax amount
     */
    supplier_tax?: number | null;
    /**
     * Supplier price amount
     */
    supplier_price?: number | null;
    /**
     * Supplier currency
     */
    supplier_currency?: string | null;
    /**
     * Total tax amount
     */
    tax?: number | null;
    /**
     * Total price amount
     */
    price?: number | null;
    /**
     * Currency
     */
    currency?: string | null;
    /**
     * Price description
     */
    price_description?: string | null;
    /**
     * Free Cancelation (true/false)
     */
    free_cancellation?: boolean | null;
    /**
     * Custom category attributes
     */
    attributes?: {
        [key: string]: unknown;
    } | null;
};

export type ProductRoom = {
    /**
     * Internal room ID
     */
    id?: string | null;
    /**
     * Supplier room ID or booking key
     */
    ids?: string | null;
    /**
     * Sort index
     */
    index?: number | null;
    /**
     * Room name
     */
    name?: string | null;
    /**
     * Room description
     */
    description?: string | null;
    /**
     * Bed type
     */
    bed?: string | null;
    /**
     * Room view
     */
    view?: string | null;
    /**
     * Image urls array
     */
    images?: Array<(string)> | null;
    /**
     * Supplier tax amount
     */
    supplier_tax?: number | null;
    /**
     * Supplier price amount
     */
    supplier_price?: number | null;
    /**
     * Supplier currency
     */
    supplier_currency?: string | null;
    fee_breakdown?: Array<FeeBreakdown>;
    pay_at_property?: number | null;
    /**
     * Total tax amount
     */
    tax?: number | null;
    /**
     * Total price amount
     */
    price?: number | null;
    /**
     * Currency
     */
    currency?: string | null;
    /**
     * Price description
     */
    price_description?: string | null;
    /**
     * Free Cancelation (true/false)
     */
    free_cancellation?: boolean | null;
    /**
     * Supplier rate key
     */
    rate_key?: string | null;
};

export type ProductTicket = {
    /**
     * Internal ticket ID
     */
    id?: string | null;
    /**
     * Supplier ticket ID
     */
    ids?: string | null;
    /**
     * Sort index
     */
    index?: number | null;
    /**
     * Ticket section
     */
    section?: string | null;
    /**
     * Ticket row
     */
    row?: string | null;
    /**
     * Ticket low seat
     */
    seat_low?: string | null;
    /**
     * Ticket low seat
     */
    seat_high?: string | null;
    /**
     * Ticket section
     */
    description?: string | null;
    /**
     * Ticket delivery methods
     */
    delivery?: Array<(string)> | null;
    /**
     * Max available quantity
     */
    qty?: number | null;
    /**
     * Ticket purchasable quantities
     */
    qtys?: Array<(number)> | null;
    /**
     * Supplier tax amount
     */
    supplier_tax?: number | null;
    /**
     * Supplier price amount
     */
    supplier_price?: number | null;
    /**
     * Supplier currency
     */
    supplier_currency?: string | null;
    /**
     * Total tax amount
     */
    tax?: number | null;
    /**
     * Total price amount
     */
    price?: number | null;
    /**
     * Currency
     */
    currency?: string | null;
    /**
     * Price description
     */
    price_description?: string | null;
    /**
     * Free Cancelation (true/false)
     */
    free_cancellation?: boolean | null;
};

export type ProductFlight = {
    /**
     * Leg ID
     */
    id?: string | null;
    /**
     * Leg duration in minutes
     */
    duration?: number | null;
    segments?: Array<ProductFlightSegment> | null;
};

export type ProductFlightSegment = {
    /**
     * Segment ID
     */
    id?: string | null;
    /**
     * Segment duration in minutes
     */
    duration?: number | null;
    /**
     * Stops number
     */
    stops?: number | null;
    /**
     * Aircraft code
     */
    aircraft?: string | null;
    /**
     * Aircraft name
     */
    aircraft_name?: string | null;
    /**
     * Marketing airline code
     */
    airline?: string | null;
    /**
     * Marketing airline name
     */
    airline_name?: string | null;
    /**
     * Operating airline code
     */
    airline_operating?: string | null;
    /**
     * Operating airline name
     */
    airline_operating_name?: string | null;
    /**
     * Flight number
     */
    flight_number?: string | null;
    /**
     * Departure date
     */
    start_date?: string | null;
    /**
     * Departure IATA airport code
     */
    start_location?: string | null;
    /**
     * Departure airport name
     */
    start_location_name?: string | null;
    /**
     * Departure airport terminal
     */
    start_location_terminal?: string | null;
    /**
     * Arrival date
     */
    end_date?: string | null;
    /**
     * Arrival IATA airport code
     */
    end_location?: string | null;
    /**
     * Arrival airport name
     */
    end_location_name?: string | null;
    /**
     * Arrival airport terminal
     */
    end_location_terminal?: string | null;
};

export type ProductReview = {
    /**
     * Internal review ID
     */
    id?: string | null;
    /**
     * Supplier review ID
     */
    ids?: string | null;
    /**
     * User name
     */
    name?: string | null;
    /**
     * User image
     */
    image?: string | null;
    /**
     * Rating score (1..10)
     */
    rating?: number;
    /**
     * Review text
     */
    review?: string | null;
    /**
     * Review date and time
     */
    date?: string | null;
};

export type Search = {
    id?: string;
    tenant_id?: string;
    user_id?: string | null;
    /**
     * Category slug
     */
    category_slug?: string;
    /**
     * Search request params
     */
    search_data?: SearchData;
    status?: 'Pending' | 'Complete';
    /**
     * Search request statistics for each supplier call
     */
    stats?: {
        [key: string]: unknown;
    } | null;
};

export type status2 = 'Pending' | 'Complete';

export type SearchResult = {
    id?: string;
    tenant_id?: string;
    user_id?: string | null;
    search_id?: string;
    /**
     * Category slug
     */
    category_slug?: string;
    /**
     * Supplier slug
     */
    supplier_slug?: string;
    /**
     * Product data - raw from supplier
     */
    item_data_raw?: {
        [key: string]: unknown;
    } | null;
    /**
     * Product data - normalized
     */
    item_data?: Product | null;
};

export type Cart = {
    id?: string;
    tenant_id?: string;
    user_id?: string | null;
    status?: 'Active' | 'Inactive';
    total_tax?: number;
    total_amount?: number;
    total_currency?: string;
    first_name?: string | null;
    last_name?: string | null;
    phone_prefix?: string | null;
    phone_number?: string | null;
    email?: string | null;
    country?: string | null;
    cart_items?: Array<CartItem>;
};

export type CartItem = {
    id?: string;
    tenant_id?: string;
    user_id?: string | null;
    cart_id?: string;
    category_slug?: string;
    supplier_slug?: string;
    status?: 'Active' | 'Inactive';
    qty?: number;
    total_tax?: number;
    total_amount?: number;
    total_currency?: string;
    /**
     * Search params at the time of booking
     */
    search_data?: SearchData;
    /**
     * Raw search result at the time of booking
     */
    item_data_raw?: {
        [key: string]: unknown;
    } | null;
    /**
     * Normalized search result at the time of booking
     */
    item_data?: Product;
    /**
     * Specific booking data (passengers, seats, room, ...)
     */
    booking_data?: BookingData;
};

export type SearchData = {
    /**
     * Start Location (lat,lng or airport code)
     */
    start_location?: string;
    /**
     * End Location (lat,lng or airport code)
     */
    end_location?: string | null;
    /**
     * Start date - YYYY-MM-DD
     */
    start_date?: string;
    /**
     * End date - YYYY-MM-DD
     */
    end_date?: string | null;
    /**
     * Number of adults
     */
    adults?: number | null;
    /**
     * Number of children
     */
    children?: number | null;
    /**
     * Number of infants on lap
     */
    infants?: number | null;
    /**
     * Number of infants with own seat
     */
    infants_seated?: number | null;
    /**
     * Direction (OneWay, RoundTrip, MultiCity)
     */
    direction?: 'OneWay' | 'RoundTrip' | 'MultiCity' | null;
    /**
     * Cabin (PremiumFirst, First, PremiumBusiness, Business, PremiumEconomy, Economy)
     */
    cabin?: 'PremiumFirst' | 'First' | 'PremiumBusiness' | 'Business' | 'PremiumEconomy' | 'Economy' | null;
    /**
     * Filter by attributes
     */
    filters?: {
        [key: string]: unknown;
    } | null;
    /**
     * Sort by field name
     */
    sort?: 'id' | 'ids' | 'supplier' | 'name' | 'distance' | 'tax' | 'price' | 'free_cancellation' | null;
    /**
     * Order ASC or DESC
     */
    order?: 'asc' | 'desc' | null;
    /**
     * Pagination - page number
     */
    page?: number | null;
    /**
     * Pagination - items per page
     */
    limit?: number | null;
    /**
     * Comma delimited fields to include in response
     */
    include?: string | null;
    /**
     * Comma delimited fields to exclude from response
     */
    exclude?: string | null;
    /**
     * Poll results by search id later or wait for response from all supplierse
     */
    poll?: boolean | null;
    /**
     * User browser
     */
    browser?: string | null;
    /**
     * User IP
     */
    ip?: string | null;
    /**
     * Language
     */
    language?: string | null;
    /**
     * Currency
     */
    currency?: string | null;
    /**
     * Unit of measure (km/mi)
     */
    uom?: string | null;
};

/**
 * Direction (OneWay, RoundTrip, MultiCity)
 */
export type direction = 'OneWay' | 'RoundTrip' | 'MultiCity';

/**
 * Cabin (PremiumFirst, First, PremiumBusiness, Business, PremiumEconomy, Economy)
 */
export type cabin = 'PremiumFirst' | 'First' | 'PremiumBusiness' | 'Business' | 'PremiumEconomy' | 'Economy';

/**
 * Sort by field name
 */
export type sort = 'id' | 'ids' | 'supplier' | 'name' | 'distance' | 'tax' | 'price' | 'free_cancellation';

/**
 * Order ASC or DESC
 */
export type order = 'asc' | 'desc';

export type BookingData = {
    /**
     * Hotels - selected room
     */
    room_id?: string | null;
    /**
     * ThingsToDo - selected variant
     */
    variant_id?: string | null;
    /**
     * ThingsToDo - selected availability
     */
    availability_id?: string | null;
    /**
     * Events - selected ticket
     */
    ticket_id?: string | null;
    /**
     * Qty of selected ticket or room or variant
     */
    qty?: number | null;
    /**
     * Hotels and Cars - booking key
     */
    booking_key?: string | null;
    /**
     * Ticket or Voucher URL
     */
    booking_url?: string | null;
    /**
     * Flights - passengers information
     */
    passengers?: Array<Passenger> | null;
    /**
     * Flights - selected seats
     */
    seats?: Array<PassengerSeat> | null;
    /**
     * Booking questions
     */
    booking_questions?: {
        [key: string]: unknown;
    } | null;
};

export type PassengerSeat = {
    passenger_id?: string;
    segment_id?: string;
    seat?: string;
    tax?: number;
    price?: number;
    currency?: string;
};

export type Passenger = {
    id?: string;
    type?: 'Adult' | 'Child' | 'Infant' | 'InfantSeated';
    title?: 'Mr.' | 'Ms.' | 'Mrs.' | 'Miss' | null;
    first_name?: string;
    middle_name?: string | null;
    last_name?: string;
    dob?: string;
    gender?: 'Male' | 'Female';
    country?: string;
    passport_country?: string | null;
    passport_number?: string | null;
    passport_expiration?: string | null;
    loyalty_program?: string | null;
    loyalty_number?: string | null;
    loyalty_tsa?: string | null;
    loyalty_redress?: string | null;
};

export type type3 = 'Adult' | 'Child' | 'Infant' | 'InfantSeated';

export type title = 'Mr.' | 'Ms.' | 'Mrs.' | 'Miss';

export type gender = 'Male' | 'Female';

export type Checkout = {
    errors?: Array<(string)> | null;
    redirect_url?: string | null;
    booking?: Booking | null;
};

export type BookingConfirmation = {
    error?: string | null;
    booking_ref?: string | null;
};

export type Booking = {
    id?: string;
    tenant_id?: string;
    user_id?: string | null;
    session_id?: string | null;
    status?: 'Pending' | 'Booked Partial' | 'Booked' | 'Error' | 'Canceled Partial' | 'Canceled';
    status_acquiring?: 'Acquiring' | 'Acquired' | 'Error' | null;
    status_acquiring_3ds?: '3DS Pending' | '3DS Success' | '3DS Error' | null;
    status_refunding?: 'Refunding' | 'Refunded Partial' | 'Refunded' | 'Error' | null;
    cancel_reason?: string | null;
    supplier_total_amount?: number;
    supplier_total_currency?: string;
    total_tax?: number;
    total_amount?: number;
    total_currency?: string;
    total_checkout_tax?: number;
    total_checkout_amount?: number;
    total_checkout_currency?: string;
    refund_total_amount?: number | null;
    refund_total_currency?: string | null;
    customer_ref?: string | null;
    booking_ref?: string | null;
    virtual_card_id?: string | null;
    first_name?: string | null;
    last_name?: string | null;
    phone_prefix?: string | null;
    phone_number?: string | null;
    email?: string;
    country?: string | null;
    created_at?: string;
    booking_items?: Array<BookingItem>;
    payments?: Array<Payment> | null;
};

export type status3 = 'Pending' | 'Booked Partial' | 'Booked' | 'Error' | 'Canceled Partial' | 'Canceled';

export type status_acquiring = 'Acquiring' | 'Acquired' | 'Error';

export type status_acquiring_3ds = '3DS Pending' | '3DS Success' | '3DS Error';

export type status_refunding = 'Refunding' | 'Refunded Partial' | 'Refunded' | 'Error';

export type BookingItem = {
    id?: string;
    tenant_id?: string;
    booking_id?: string;
    category_slug?: string;
    supplier_slug?: string;
    supplier_booking_id?: string | null;
    supplier_booking_ref?: string | null;
    name?: string | null;
    qty?: number;
    status?: 'Pending' | 'Booked' | 'Error' | 'Canceled';
    status_issuing?: 'Issuing' | 'Issued' | 'Error' | null;
    status_booking?: 'Booking' | 'Booked' | 'Error' | null;
    status_canceling?: 'Canceling' | 'Canceled' | 'Error' | null;
    status_refunding?: 'Refunding' | 'Refunded' | 'Error' | null;
    cancel_reason?: string | null;
    supplier_total_amount?: number;
    supplier_total_currency?: string;
    total_tax?: number;
    total_amount?: number;
    total_currency?: string;
    total_checkout_tax?: number;
    total_checkout_amount?: number;
    total_checkout_currency?: string;
    refund_total_amount?: number | null;
    refund_total_currency?: string | null;
    /**
     * Search params at the time of booking
     */
    search_data?: SearchData;
    /**
     * Raw search result at the time of booking
     */
    item_data_raw?: {
        [key: string]: unknown;
    } | null;
    /**
     * Normalized search result at the time of booking
     */
    item_data?: Product;
    /**
     * Specific booking data (passengers, seats, room, ...)
     */
    booking_data?: BookingData;
    created_at?: string;
    payments?: Array<Payment> | null;
};

export type status4 = 'Pending' | 'Booked' | 'Error' | 'Canceled';

export type status_issuing = 'Issuing' | 'Issued' | 'Error';

export type status_booking = 'Booking' | 'Booked' | 'Error';

export type status_canceling = 'Canceling' | 'Canceled' | 'Error';

export type status_refunding2 = 'Refunding' | 'Refunded' | 'Error';

export type Payment = {
    id?: string;
    tenant_id?: string;
    user_id?: string | null;
    booking_id?: string | null;
    booking_item_id?: string | null;
    payment_ref?: string | null;
    payment_code?: string | null;
    payment_method?: string | null;
    payment_gateway?: string | null;
    name?: string | null;
    type?: string;
    status?: 'Pending' | '3DS' | 'Success' | 'Error' | null;
    error?: string | null;
    total_amount?: number;
    total_currency?: string;
    card_brand?: string | null;
    card_last_four?: string | null;
    created_at?: string;
};

export type status5 = 'Pending' | '3DS' | 'Success' | 'Error';

export type PaymentGateway = {
    id?: string;
    scope?: 'Acquiring' | 'Issuing';
    name?: string;
    status?: 'Active' | 'Inactive';
};

export type scope2 = 'Acquiring' | 'Issuing';

export type PaymentMethod = {
    id?: string;
    tenant_id?: string;
    payment_gateway_id?: string;
    scope?: 'Acquiring' | 'Issuing';
    name?: string;
    status?: 'Active' | 'Inactive';
    payment_gateway?: PaymentGateway | null;
};

export type Report = {
    name: string;
    pending?: number;
    booked?: number;
    cancelled?: number;
};

export type Role = {
    id?: string;
    company_id?: string;
    supplier_id?: string;
    type: 'admin' | 'company' | 'supplier';
    name: string;
    permissions?: string;
    amount_limit?: number;
};

export type type4 = 'admin' | 'company' | 'supplier';

export type User = {
    id?: number;
    tenant_id?: string;
    first_name: string;
    last_name: string;
    email: string;
    email_verified_at?: string;
    password: string;
    phone_number?: string;
    phone_prefix?: string;
    country?: string;
    language?: string;
    currency?: string;
    distance?: string;
};

export type Admin = {
    id?: number;
    company_id?: string;
    supplier_id?: string;
    role_id: string;
    type: 'admin' | 'company' | 'supplier';
    status?: 'Active' | 'Inactive';
    first_name: string;
    last_name: string;
    email: string;
    email_verified_at?: string;
    password: string;
};

export type Log = {
    id?: string;
    action: string;
    admin_id: string;
    company_id?: string;
    supplier_id?: string;
};

export type SmCategory = {
    id?: string;
    /**
     * Localized
     */
    name?: string;
    slug?: string;
    status?: 'Active' | 'Inactive';
    product_attributes?: Array<SmProductAttribute> | null;
    variant_attributes?: Array<SmProductAttribute> | null;
};

export type SmProductAttribute = {
    id?: string;
    category_id?: string;
    name?: string;
    slug?: string;
    type?: 'Short Text' | 'Long Text' | 'Rich Text' | 'Boolean' | 'Number' | 'Date' | 'Time' | 'Single Select' | 'Multi Select';
    options?: Array<(string)>;
    required?: boolean;
    localized?: boolean;
    filterable?: boolean;
    sortable?: boolean;
};

export type SmVariantAttribute = {
    id?: string;
    category_id?: string;
    name?: string;
    slug?: string;
    type?: 'Short Text' | 'Long Text' | 'Rich Text' | 'Boolean' | 'Number' | 'Date' | 'Time' | 'Single Select' | 'Multi Select';
    options?: Array<(string)>;
    required?: boolean;
    localized?: boolean;
    filterable?: boolean;
    sortable?: boolean;
};

export type SmSupplier = {
    id?: string;
    name?: string;
    description?: string | null;
    status?: 'Active' | 'Inactive';
    logo?: string | null;
    icon?: string | null;
    latitude?: number;
    longitude?: number;
    address?: string | null;
    address2?: string | null;
    city?: string | null;
    state?: string | null;
    zip?: string | null;
    country?: string | null;
    phone_prefix?: string | null;
    phone_number?: string | null;
    email?: string | null;
    website?: string | null;
    payment_method?: 'Virtual Card' | 'Bank Transfer' | null;
    payment_currency?: string | null;
    commission_agent?: number | null;
    /**
     * Markup for individual static content supplier
     */
    commission_channel?: number | null;
    payout_amount_min?: number | null;
    payout_interval?: number | null;
    bank_account_name?: string | null;
    bank_account_number?: string | null;
    bank_account_currency?: string | null;
    bank_routing_number?: string | null;
    bank_name?: string | null;
    bank_address?: string | null;
    bank_address2?: string | null;
    bank_city?: string | null;
    bank_state?: string | null;
    bank_zip?: string | null;
    bank_country?: string | null;
    categories?: Array<SmCategory> | null;
};

export type payment_method2 = 'Virtual Card' | 'Bank Transfer';

export type SmProduct = {
    id?: string;
    supplier_id?: string;
    category_id?: string;
    /**
     * Localized
     */
    name?: string;
    /**
     * Localized
     */
    description?: number;
    status?: 'Active' | 'Inactive';
    latitude?: number;
    longitude?: number;
    address?: string;
    address2?: string;
    city?: string;
    state?: string;
    zip?: string;
    country?: string;
    cancelation?: 'Free Cancelation' | 'Non Refundable' | 'Partially Refundable';
    attributes?: Array<{
        [key: string]: unknown;
    }> | null;
    distance?: number | null;
    images?: Array<SmImage>;
    availability?: Array<SmAvailability> | null;
};

export type cancelation = 'Free Cancelation' | 'Non Refundable' | 'Partially Refundable';

export type SmVariant = {
    id?: string;
    supplier_id?: string;
    category_id?: string;
    product_id?: string;
    /**
     * Localized
     */
    name?: string;
    /**
     * Localized
     */
    description?: number;
    status?: 'Active' | 'Inactive';
    cancelation?: 'Free Cancelation' | 'Non Refundable' | 'Partially Refundable';
    attributes?: Array<{
        [key: string]: unknown;
    }> | null;
    images?: Array<SmImage>;
    availability?: Array<SmAvailability> | null;
};

export type SmImage = {
    id?: string;
    supplier_id?: string;
    product_id?: string | null;
    variant_id?: string | null;
    /**
     * Localized
     */
    name?: string;
    url?: string;
    thumbnail?: boolean;
};

export type SmAvailability = {
    id?: string;
    supplier_id?: string;
    product_id?: string | null;
    variant_id?: string | null;
    start_date?: string;
    end_date?: string;
    type?: 'Adult' | 'Child';
    price?: number;
    currency?: string;
    availability?: number;
};

export type type5 = 'Adult' | 'Child';

export type SmBooking = {
    id?: string;
    tenant_id?: string;
    supplier_id?: string;
    status?: string;
    cancel_reason?: string | null;
    total_amount?: number;
    total_currency?: string;
    refund_total_amount?: number;
    refund_total_currency?: string;
    customer_ref?: string | null;
    booking_ref?: string | null;
    virtual_card_id?: string | null;
    first_name?: string | null;
    last_name?: string | null;
    phone_prefix?: string | null;
    phone_number?: string | null;
    email?: string;
    country?: string | null;
    supplier?: SmSupplier;
    booking_items?: Array<SmBookingItem>;
};

export type SmBookingItem = {
    id?: string;
    tenant_id?: string;
    supplier_id?: string;
    booking_id?: string;
    product_id?: string;
    variant_id?: string | null;
    availability_id?: string;
    qty?: number;
    status?: string;
    cancel_reason?: string | null;
    total_amount?: number;
    total_currency?: string;
    refund_total_amount?: number;
    refund_total_currency?: string;
    product?: SmProduct;
    variant?: SmVariant;
    availability?: SmAvailability;
};

export type VirtualCard = {
    id?: number;
    amount?: number;
    currency?: string;
    card_name?: string;
    card_number?: string;
    card_expiration?: string;
    card_sec?: string;
    address1?: string | null;
    address2?: string | null;
    city?: string | null;
    state?: string | null;
    zipcode?: string | null;
    country?: string | null;
    payment_gateway?: string;
};

export type LogBooking = {
    id?: string;
    /**
     * Associated booking_item id
     */
    booking_item_id?: string | null;
    /**
     * Request URL
     */
    url?: string | null;
    /**
     * Request headers
     */
    headers?: {
        [key: string]: unknown;
    } | null;
    /**
     * Request body
     */
    request?: {
        [key: string]: unknown;
    } | null;
    /**
     * Response
     */
    response?: {
        [key: string]: unknown;
    } | null;
};

export type LogPayment = {
    id?: string;
    /**
     * Associated payment id
     */
    payment_id?: string | null;
    /**
     * Request URL
     */
    url?: string | null;
    /**
     * Request headers
     */
    headers?: {
        [key: string]: unknown;
    } | null;
    /**
     * Request body
     */
    request?: {
        [key: string]: unknown;
    } | null;
    /**
     * Response
     */
    response?: {
        [key: string]: unknown;
    } | null;
};

export type Token = {
    token?: string;
    expires?: string;
};

export type AuthTokens = {
    access?: Token;
    refresh?: Token;
};

export type Error = {
    code?: number;
    message?: string;
};

export type PostAuthLoginData = {
    requestBody: {
        email: string;
        password: string;
    };
};

export type PostAuthLoginResponse = {
    tokens?: AuthTokens;
};

export type PostAuthLogoutData = {
    requestBody: {
        refresh_token: string;
    };
};

export type PostAuthLogoutResponse = {
    success?: boolean;
};

export type PostAuthRefreshTokensData = {
    requestBody: {
        refresh_token: string;
    };
};

export type PostAuthRefreshTokensResponse = AuthTokens;

export type PostAuthForgotPasswordData = {
    requestBody: {
        email: string;
        captcha_token: string;
    };
};

export type PostAuthForgotPasswordResponse = {
    success?: boolean;
};

export type PostAuthResetPasswordData = {
    requestBody: {
        /**
         * At least one number and one letter
         */
        password: string;
    };
    /**
     * The reset password token
     */
    token: string;
};

export type PostAuthResetPasswordResponse = {
    success?: boolean;
};

export type PostAuthSendVerificationEmailData = {
    requestBody: {
        email: string;
    };
};

export type PostAuthSendVerificationEmailResponse = {
    success?: boolean;
};

export type PostAuthSendVerificationEmailResetPasswordData = {
    requestBody: {
        email: string;
    };
};

export type PostAuthSendVerificationEmailResetPasswordResponse = {
    success?: boolean;
};

export type PostAuthVerifyEmailData = {
    /**
     * The verify email token
     */
    token: string;
};

export type PostAuthVerifyEmailResponse = {
    success?: boolean;
};

export type GetBookingsUserData = {
    /**
     * Return booking and booking items amounts in different currency
     */
    currency?: string;
    /**
     * Bookings created until end_date
     */
    endDate?: string;
    /**
     * Booking comma delimited fields to exclude in response
     */
    exclude?: string;
    /**
     * Booking comma delimited fields to include in response
     */
    include?: string;
    /**
     * Maximum number of bookings
     */
    limit?: number;
    /**
     * Page number
     */
    page?: number;
    /**
     * Sort by field:desc/asc (ex. created_at:asc)
     */
    sort?: string;
    /**
     * Bookings created from start_date
     */
    startDate?: string;
    /**
     * Booking status
     */
    status?: 'Pending' | 'Booked Partial' | 'Booked' | 'Error' | 'Canceled Partial' | 'Canceled';
};

export type GetBookingsUserResponse = {
    results?: Array<Booking>;
    page?: number;
    limit?: number;
    total?: number;
};

export type PostBookingsFindData = {
    /**
     * Return booking and booking items amounts in different currency
     */
    currency?: string;
    requestBody: {
        /**
         * Boking references
         */
        booking_ref: string;
        /**
         * Customer last name
         */
        last_name: string;
    };
};

export type PostBookingsFindResponse = Booking;

export type GetBookingsByBookingIdData = {
    /**
     * Booking ID
     */
    bookingId: string;
    /**
     * Return booking and booking items amounts in different currency
     */
    currency?: string;
};

export type GetBookingsByBookingIdResponse = Booking;

export type PostBookingsByBookingIdCancelData = {
    /**
     * Booking ID
     */
    bookingId: string;
    requestBody: {
        /**
         * Reason description for canceling the booking
         */
        reason: string;
    };
};

export type PostBookingsByBookingIdCancelResponse = {
    success?: boolean;
    /**
     * Error message
     */
    error?: string;
};

export type PostBookingsByBookingIdItemsByBookingItemIdCancelData = {
    /**
     * Booking ID
     */
    bookingId: string;
    /**
     * Item ID
     */
    bookingItemId: string;
    requestBody: {
        /**
         * Reason description for canceling the booking item
         */
        reason: string;
    };
};

export type PostBookingsByBookingIdItemsByBookingItemIdCancelResponse = {
    success?: boolean;
    /**
     * Error message
     */
    error?: string;
};

export type PostCartData = {
    /**
     * Return cart and cart items amounts in different currency
     */
    currency?: string;
    requestBody: {
        /**
         * Currency 3 letter currency code
         */
        currency?: string;
        cart_items?: Array<{
            /**
             * Product ID from search results
             */
            product_id: string;
            /**
             * Product quantity
             */
            qty?: number;
            booking_data?: BookingData;
        }>;
        customer?: {
            /**
             * Customer first name
             */
            first_name: string;
            /**
             * Customer last name
             */
            last_name: string;
            /**
             * Customer phone prefix
             */
            phone_prefix: string;
            /**
             * Customer phone number
             */
            phone_number: string;
            /**
             * Customer email
             */
            email: string;
            /**
             * Customer country
             */
            country: string;
        };
    };
};

export type PostCartResponse = Cart;

export type GetCartByCartIdData = {
    /**
     * Cart ID
     */
    cartId: string;
    /**
     * Return cart and cart items amounts in different currency
     */
    currency?: string;
};

export type GetCartByCartIdResponse = Cart;

export type PatchCartByCartIdData = {
    /**
     * Cart ID
     */
    cartId: string;
    /**
     * Return cart and cart items amounts in different currency
     */
    currency?: string;
    requestBody: {
        /**
         * Currency 3 letter currency code
         */
        currency?: string;
        customer?: {
            /**
             * Customer first name
             */
            first_name: string;
            /**
             * Customer last name
             */
            last_name: string;
            /**
             * Customer phone prefix
             */
            phone_prefix: string;
            /**
             * Customer phone number
             */
            phone_number: string;
            /**
             * Customer email
             */
            email: string;
            /**
             * Customer country
             */
            country: string;
        };
    };
};

export type PatchCartByCartIdResponse = Cart;

export type DeleteCartByCartIdData = {
    /**
     * Cart ID
     */
    cartId: string;
};

export type DeleteCartByCartIdResponse = unknown;

export type PostCartByCartIdItemsData = {
    /**
     * Cart ID
     */
    cartId: string;
    /**
     * Return cart and cart items amounts in different currency
     */
    currency?: string;
    requestBody: {
        /**
         * Product ID from search results
         */
        product_id: string;
        /**
         * Product quantity
         */
        qty?: number;
        booking_data?: BookingData;
    };
};

export type PostCartByCartIdItemsResponse = Cart;

export type GetCartByCartIdItemsByCartItemIdData = {
    /**
     * Cart ID
     */
    cartId: string;
    /**
     * Cart Item ID
     */
    cartItemId: string;
    /**
     * Return cart and cart items amounts in different currency
     */
    currency?: string;
};

export type GetCartByCartIdItemsByCartItemIdResponse = CartItem;

export type PatchCartByCartIdItemsByCartItemIdData = {
    /**
     * Cart ID
     */
    cartId: string;
    /**
     * Cart Item ID
     */
    cartItemId: string;
    /**
     * Return cart and cart items amounts in different currency
     */
    currency?: string;
    requestBody: {
        /**
         * Product ID from search results
         */
        product_id: string;
        /**
         * Product quantity
         */
        qty?: number;
        booking_data?: BookingData;
    };
};

export type PatchCartByCartIdItemsByCartItemIdResponse = Cart;

export type DeleteCartByCartIdItemsByCartItemIdData = {
    /**
     * Cart ID
     */
    cartId: string;
    /**
     * Cart Item ID
     */
    cartItemId: string;
    /**
     * Return cart and cart items amounts in different currency
     */
    currency?: string;
};

export type DeleteCartByCartIdItemsByCartItemIdResponse = Cart;

export type PostCheckoutData = {
    requestBody: {
        /**
         * Currency 3 letter currency code
         */
        currency?: string;
        cart_id: string;
        captcha_token?: string;
        payment?: {
            card_name: string;
            card_number: string;
            /**
             * YYMM
             */
            card_expiration: string;
            card_sec: string;
            address1?: string;
            address2?: string;
            city?: string;
            state?: string;
            zipcode?: string;
            /**
             * 2 letters country code
             */
            country?: string;
            document?: string;
        };
    };
};

export type PostCheckoutResponse = Checkout;

export type PostCheckoutByBookingIdData = {
    /**
     * Booking ID
     */
    bookingId: string;
};

export type PostCheckoutByBookingIdResponse = Booking;

export type GetConfigData = {
    /**
     * Hostname
     */
    hostname?: string;
    /**
     * Tenant ID
     */
    id?: string;
    /**
     * Language (for localized fields)
     */
    language?: string;
};

export type GetConfigResponse = {
    tenant?: Tenant;
    api_key?: ApiKey;
    categories?: Array<Category>;
    config_web?: ConfigWeb;
    config_mobile?: ConfigMobile;
};

export type GetConfigWebData = {
    /**
     * Hostname
     */
    hostname?: string;
    /**
     * Tenant ID
     */
    id?: string;
    /**
     * Language (for localized fields)
     */
    language?: string;
};

export type GetConfigWebResponse = {
    tenant?: Tenant;
    api_key?: ApiKey;
    categories?: Array<Category>;
    config_web?: ConfigWeb;
};

export type GetConfigMobileData = {
    /**
     * Hostname
     */
    hostname?: string;
    /**
     * Tenant ID
     */
    id?: string;
    /**
     * Language (for localized fields)
     */
    language?: string;
};

export type GetConfigMobileResponse = {
    tenant?: Tenant;
    api_key?: ApiKey;
    categories?: Array<Category>;
    config_mobile?: ConfigMobile;
};

export type PostLocationsSearchData = {
    /**
     * Language (for localized fields)
     */
    language?: string;
    requestBody: {
        /**
         * Search keyword
         */
        keyword: string;
        /**
         * Comma separated location types (airport, locality, administrative_area_level_3)
         */
        type?: string;
    };
};

export type PostLocationsSearchResponse = {
    results?: Array<Location>;
};

export type GetLocationsByLocationIdData = {
    /**
     * Location ID
     */
    locationId: string;
};

export type GetLocationsByLocationIdResponse = Location;

export type PostProductsSearchFlightsData = {
    /**
     * Currency (for prices)
     */
    currency?: string;
    /**
     * Language (for localized fields)
     */
    language?: string;
    requestBody: {
        /**
         * Origin airport code (| separated for MultiCity)
         */
        start_location: string;
        /**
         * Destination airport code (| separated for MultiCity)
         */
        end_location: string;
        /**
         * Departure date - YYYY-MM-DD (| separated for MultiCity)
         */
        start_date: string;
        /**
         * Return date - YYYY-MM-DD (only for RoundTrip)
         */
        end_date?: string;
        /**
         * Number of adults
         */
        adults: number;
        /**
         * Number of children
         */
        children?: number;
        /**
         * Number of infants on lap
         */
        infants?: number;
        /**
         * Number of infants with own seat
         */
        infants_seated?: number;
        /**
         * Direction (OneWay, RoundTrip, MultiCity)
         */
        direction: 'OneWay' | 'RoundTrip' | 'MultiCity';
        /**
         * Cabin (PremiumFirst, First, PremiumBusiness, Business, PremiumEconomy, Economy)
         */
        cabin?: 'PremiumFirst' | 'First' | 'PremiumBusiness' | 'Business' | 'PremiumEconomy' | 'Economy';
        /**
         * Filter by attributes
         */
        filters?: {
            [key: string]: unknown;
        };
        /**
         * Sort by field name
         */
        sort?: 'id' | 'ids' | 'supplier' | 'name' | 'distance' | 'tax' | 'price' | 'free_cancellation';
        /**
         * Order ASC or DESC
         */
        order?: 'asc' | 'desc';
        /**
         * Pagination - page number
         */
        page?: number;
        /**
         * Pagination - items per page
         */
        limit?: number;
        /**
         * Comma delimited fields to include in response
         */
        include?: string;
        /**
         * Comma delimited fields to exclude in response
         */
        exclude?: string;
        /**
         * Poll results by search id later or wait for response from all supplierse
         */
        poll?: boolean;
        /**
         * Return raw results from supplier or normalized results
         */
        raw?: boolean;
    };
    /**
     * Unit of measuring distance (mi, km)
     */
    uom?: 'mi' | 'km';
};

export type PostProductsSearchFlightsResponse = {
    search?: Search;
    results?: Array<Product>;
    page?: number;
    limit?: number;
    total?: number;
};

export type PostProductsSearchHotelsData = {
    /**
     * Currency (for prices)
     */
    currency?: string;
    /**
     * Language (for localized fields)
     */
    language?: string;
    requestBody: {
        /**
         * Destination geolocation (latitude,longitude)
         */
        start_location: string;
        /**
         * Check-in date - YYYY-MM-DD
         */
        start_date: string;
        /**
         * Check-out date - YYYY-MM-DD
         */
        end_date: string;
        /**
         * Number of adults (comma separated per room)
         */
        adults: string;
        /**
         * Number of children (comma separated per room)
         */
        children?: string;
        /**
         * Filter by attributes
         */
        filters?: {
            [key: string]: unknown;
        };
        /**
         * Sort by field name
         */
        sort?: 'id' | 'ids' | 'supplier' | 'name' | 'distance' | 'tax' | 'price' | 'free_cancellation';
        /**
         * Order ASC or DESC
         */
        order?: 'asc' | 'desc';
        /**
         * Pagination - page number
         */
        page?: number;
        /**
         * Pagination - items per page
         */
        limit?: number;
        /**
         * Comma delimited fields to include in response
         */
        include?: string;
        /**
         * Comma delimited fields to exclude in response
         */
        exclude?: string;
        /**
         * Poll results by search id later or wait for response from all supplierse
         */
        poll?: boolean;
        /**
         * Return raw results from supplier or normalized results
         */
        raw?: boolean;
    };
    /**
     * Unit of measuring distance (mi, km)
     */
    uom?: 'mi' | 'km';
};

export type PostProductsSearchHotelsResponse = {
    search?: Search;
    results?: Array<Product>;
    page?: number;
    limit?: number;
    total?: number;
};

export type PostProductsSearchCarRentalData = {
    /**
     * Currency (for prices)
     */
    currency?: string;
    /**
     * Language (for localized fields)
     */
    language?: string;
    requestBody: {
        /**
         * Pick-up geolocation (latitude,longitude)
         */
        start_location: string;
        /**
         * Drop-off geolocation (latitude,longitude)
         */
        end_location?: string;
        /**
         * Pick-up date and time - YYYY-MM-DD hh:mm:ss
         */
        start_date: string;
        /**
         * Drop-off date and time - YYYY-MM-DD hh:mm:ss
         */
        end_date: string;
        /**
         * Filter by attributes
         */
        filters?: {
            [key: string]: unknown;
        };
        /**
         * Sort by field name
         */
        sort?: 'id' | 'ids' | 'supplier' | 'name' | 'distance' | 'tax' | 'price' | 'free_cancellation';
        /**
         * Order ASC or DESC
         */
        order?: 'asc' | 'desc';
        /**
         * Pagination - page number
         */
        page?: number;
        /**
         * Pagination - items per page
         */
        limit?: number;
        /**
         * Comma delimited fields to include in response
         */
        include?: string;
        /**
         * Comma delimited fields to exclude in response
         */
        exclude?: string;
        /**
         * Poll results by search id later or wait for response from all supplierse
         */
        poll?: boolean;
        /**
         * Return raw results from supplier or normalized results
         */
        raw?: boolean;
    };
    /**
     * Unit of measuring distance (mi, km)
     */
    uom?: 'mi' | 'km';
};

export type PostProductsSearchCarRentalResponse = {
    search?: Search;
    results?: Array<Product>;
    page?: number;
    limit?: number;
    total?: number;
};

export type PostProductsSearchTransportationData = {
    /**
     * Currency (for prices)
     */
    currency?: string;
    /**
     * Language (for localized fields)
     */
    language?: string;
    requestBody: {
        /**
         * Pick-up geolocation (latitude,longitude)
         */
        start_location: string;
        /**
         * Drop-off geolocation (latitude,longitude)
         */
        end_location: string;
        /**
         * Pick-up date and time - YYYY-MM-DD hh:mm:ss
         */
        start_date: string;
        /**
         * Return date and time - YYYY-MM-DD hh:mm:ss
         */
        end_date?: string;
        /**
         * Number of adults
         */
        adults: number;
        /**
         * Number of children
         */
        children?: number;
        /**
         * Direction (OneWay, RoundTrip)
         */
        direction: 'OneWay' | 'RoundTrip';
        /**
         * Filter by attributes
         */
        filters?: {
            [key: string]: unknown;
        };
        /**
         * Sort by field name
         */
        sort?: 'id' | 'ids' | 'supplier' | 'name' | 'distance' | 'tax' | 'price' | 'free_cancellation';
        /**
         * Order ASC or DESC
         */
        order?: 'asc' | 'desc';
        /**
         * Pagination - page number
         */
        page?: number;
        /**
         * Pagination - items per page
         */
        limit?: number;
        /**
         * Comma delimited fields to include in response
         */
        include?: string;
        /**
         * Comma delimited fields to exclude in response
         */
        exclude?: string;
        /**
         * Poll results by search id later or wait for response from all supplierse
         */
        poll?: boolean;
        /**
         * Return raw results from supplier or normalized results
         */
        raw?: boolean;
    };
    /**
     * Unit of measuring distance (mi, km)
     */
    uom?: 'mi' | 'km';
};

export type PostProductsSearchTransportationResponse = {
    search?: Search;
    results?: Array<Product>;
    page?: number;
    limit?: number;
    total?: number;
};

export type PostProductsSearchThingsToDoData = {
    /**
     * Currency (for prices)
     */
    currency?: string;
    /**
     * Language (for localized fields)
     */
    language?: string;
    requestBody: {
        /**
         * Destination geolocation (latitude,longitude)
         */
        start_location: string;
        /**
         * Start date - YYYY-MM-DD
         */
        start_date: string;
        /**
         * End date - YYYY-MM-DD
         */
        end_date: string;
        /**
         * Number of adults
         */
        adults?: number;
        /**
         * Number of children
         */
        children?: number;
        /**
         * Filter by attributes
         */
        filters?: {
            [key: string]: unknown;
        };
        /**
         * Sort by field name
         */
        sort?: 'id' | 'ids' | 'supplier' | 'name' | 'distance' | 'tax' | 'price' | 'free_cancellation';
        /**
         * Order ASC or DESC
         */
        order?: 'asc' | 'desc';
        /**
         * Pagination - page number
         */
        page?: number;
        /**
         * Pagination - items per page
         */
        limit?: number;
        /**
         * Comma delimited fields to include in response
         */
        include?: string;
        /**
         * Comma delimited fields to exclude in response
         */
        exclude?: string;
        /**
         * Poll results by search id later or wait for response from all supplierse
         */
        poll?: boolean;
        /**
         * Return raw results from supplier or normalized results
         */
        raw?: boolean;
    };
    /**
     * Unit of measuring distance (mi, km)
     */
    uom?: 'mi' | 'km';
};

export type PostProductsSearchThingsToDoResponse = {
    search?: Search;
    results?: Array<Product>;
    page?: number;
    limit?: number;
    total?: number;
};

export type PostProductsSearchShowsEventsData = {
    /**
     * Currency (for prices)
     */
    currency?: string;
    /**
     * Language (for localized fields)
     */
    language?: string;
    requestBody: {
        /**
         * Destination geolocation (latitude,longitude)
         */
        start_location: string;
        /**
         * Start date - YYYY-MM-DD
         */
        start_date: string;
        /**
         * End date - YYYY-MM-DD
         */
        end_date: string;
        /**
         * Filter by attributes
         */
        filters?: {
            [key: string]: unknown;
        };
        /**
         * Sort by field name
         */
        sort?: 'id' | 'ids' | 'supplier' | 'name' | 'distance' | 'tax' | 'price' | 'free_cancellation';
        /**
         * Order ASC or DESC
         */
        order?: 'asc' | 'desc';
        /**
         * Pagination - page number
         */
        page?: number;
        /**
         * Pagination - items per page
         */
        limit?: number;
        /**
         * Comma delimited fields to include in response
         */
        include?: string;
        /**
         * Comma delimited fields to exclude in response
         */
        exclude?: string;
        /**
         * Poll results by search id later or wait for response from all supplierse
         */
        poll?: boolean;
        /**
         * Return raw results from supplier or normalized results
         */
        raw?: boolean;
    };
    /**
     * Unit of measuring distance (mi, km)
     */
    uom?: 'mi' | 'km';
};

export type PostProductsSearchShowsEventsResponse = {
    search?: Search;
    results?: Array<Product>;
    page?: number;
    limit?: number;
    total?: number;
};

export type PostProductsSearchDiningData = {
    /**
     * Currency (for prices)
     */
    currency?: string;
    /**
     * Language (for localized fields)
     */
    language?: string;
    requestBody: {
        /**
         * Destination geolocation (latitude,longitude)
         */
        start_location: string;
        /**
         * Date and time - YYYY-MM-DD HH:mm:00
         */
        start_date?: string;
        /**
         * Number of adults
         */
        adults?: number;
        /**
         * Filter by attributes
         */
        filters?: {
            [key: string]: unknown;
        };
        /**
         * Sort by field name
         */
        sort?: 'id' | 'ids' | 'supplier' | 'name' | 'distance' | 'tax' | 'price' | 'free_cancellation';
        /**
         * Order ASC or DESC
         */
        order?: 'asc' | 'desc';
        /**
         * Pagination - page number
         */
        page?: number;
        /**
         * Pagination - items per page
         */
        limit?: number;
        /**
         * Comma delimited fields to include in response
         */
        include?: string;
        /**
         * Comma delimited fields to exclude in response
         */
        exclude?: string;
        /**
         * Poll results by search id later or wait for response from all supplierse
         */
        poll?: boolean;
        /**
         * Return raw results from supplier or normalized results
         */
        raw?: boolean;
    };
    /**
     * Unit of measuring distance (mi, km)
     */
    uom?: 'mi' | 'km';
};

export type PostProductsSearchDiningResponse = {
    search?: Search;
    results?: Array<Product>;
    page?: number;
    limit?: number;
    total?: number;
};

export type PostProductsSearchParkingData = {
    /**
     * Currency (for prices)
     */
    currency?: string;
    /**
     * Language (for localized fields)
     */
    language?: string;
    requestBody: {
        /**
         * Destination geolocation (latitude,longitude)
         */
        start_location: string;
        /**
         * Arriving date and time - YYYY-MM-DD hh:mm:ss
         */
        start_date: string;
        /**
         * Leaving date and time - YYYY-MM-DD hh:mm:ss
         */
        end_date: string;
        /**
         * Filter by attributes
         */
        filters?: {
            [key: string]: unknown;
        };
        /**
         * Sort by field name
         */
        sort?: 'id' | 'ids' | 'supplier' | 'name' | 'distance' | 'tax' | 'price' | 'free_cancellation';
        /**
         * Order ASC or DESC
         */
        order?: 'asc' | 'desc';
        /**
         * Pagination - page number
         */
        page?: number;
        /**
         * Pagination - items per page
         */
        limit?: number;
        /**
         * Comma delimited fields to include in response
         */
        include?: string;
        /**
         * Comma delimited fields to exclude in response
         */
        exclude?: string;
        /**
         * Poll results by search id later or wait for response from all supplierse
         */
        poll?: boolean;
        /**
         * Return raw results from supplier or normalized results
         */
        raw?: boolean;
    };
    /**
     * Unit of measuring distance (mi, km)
     */
    uom?: 'mi' | 'km';
};

export type PostProductsSearchParkingResponse = {
    search?: Search;
    results?: Array<Product>;
    page?: number;
    limit?: number;
    total?: number;
};

export type PostProductsSearchByCategorySlugData = {
    /**
     * Category slug
     */
    categorySlug: string;
    /**
     * Currency (for prices)
     */
    currency?: string;
    /**
     * Language (for localized fields)
     */
    language?: string;
    requestBody: {
        /**
         * Start location
         */
        start_location: string;
        /**
         * End location
         */
        end_location?: string;
        /**
         * Departure date - YYYY-MM-DD
         */
        start_date: string;
        /**
         * Return date - YYYY-MM-DD
         */
        end_date?: string;
        /**
         * Number of adults
         */
        adults?: number;
        /**
         * Number of children
         */
        children?: number;
        /**
         * Number of infants
         */
        infants?: number;
        /**
         * Direction (OneWay, RoundTrip, MultiCity)
         */
        direction?: 'OneWay' | 'RoundTrip' | 'MultiCity';
        /**
         * Cabin (PremiumFirst, First, PremiumBusiness, Business, PremiumEconomy, Economy)
         */
        cabin?: 'PremiumFirst' | 'First' | 'PremiumBusiness' | 'Business' | 'PremiumEconomy' | 'Economy';
        /**
         * Filter by attributes
         */
        filters?: {
            [key: string]: unknown;
        };
        /**
         * Sort by field name
         */
        sort?: 'id' | 'ids' | 'supplier' | 'name' | 'distance' | 'tax' | 'price' | 'free_cancellation';
        /**
         * Order ASC or DESC
         */
        order?: 'asc' | 'desc';
        /**
         * Pagination - page number
         */
        page?: number;
        /**
         * Pagination - items per page
         */
        limit?: number;
        /**
         * Comma delimited fields to include in response
         */
        include?: string;
        /**
         * Comma delimited fields to exclude in response
         */
        exclude?: string;
        /**
         * Poll results by search id later or wait for response from all supplierse
         */
        poll?: boolean;
        /**
         * Return raw results from supplier or normalized results
         */
        raw?: boolean;
    };
    /**
     * Unit of measuring distance (mi, km)
     */
    uom?: 'mi' | 'km';
};

export type PostProductsSearchByCategorySlugResponse = {
    search?: Search;
    results?: Array<Product>;
    page?: number;
    limit?: number;
    total?: number;
};

export type PostProductsSearchPollBySearchIdData = {
    requestBody: {
        /**
         * Filter by attributes
         */
        filters?: {
            [key: string]: unknown;
        };
        /**
         * Sort by field name
         */
        sort?: 'id' | 'ids' | 'supplier' | 'name' | 'distance' | 'tax' | 'price' | 'free_cancellation';
        /**
         * Order ASC or DESC
         */
        order?: 'asc' | 'desc';
        /**
         * Pagination - page number
         */
        page?: number;
        /**
         * Pagination - items per page
         */
        limit?: number;
        /**
         * Comma delimited fields to include in response
         */
        include?: string;
        /**
         * Comma delimited fields to exclude in response
         */
        exclude?: string;
        /**
         * Return raw results from supplier or normalized results
         */
        raw?: boolean;
    };
    /**
     * Search ID
     */
    searchId: string;
};

export type PostProductsSearchPollBySearchIdResponse = {
    search?: Search;
    results?: Array<Product>;
    page?: number;
    limit?: number;
    total?: number;
};

export type GetProductsByProductIdData = {
    /**
     * Fetch availability from supplier (or reprice for flights)
     */
    availability?: boolean;
    /**
     * Check availability for number of adults
     */
    availabilityAdults?: number;
    /**
     * Check availability for number of children
     */
    availabilityChildren?: number;
    /**
     * Check availability for date (YYYY-MM-DD HH:mm:ss)
     */
    availabilityDate?: string;
    /**
     * Booking questions to retrieve quote (for parking)
     */
    bookingQuestions?: {
        [key: string]: unknown;
    };
    /**
     * Currency (for prices)
     */
    currency?: string;
    /**
     * Fetch product details from supplier
     */
    details?: boolean;
    /**
     * Start date (YYYY-MM-DD hh:mm:00)
     */
    endDate?: string;
    /**
     * Comma delimited fields to exclude from response
     */
    exclude?: boolean;
    /**
     * Comma delimited fields to include in response
     */
    include?: boolean;
    /**
     * Language (for localized fields)
     */
    language?: string;
    /**
     * Product ID
     */
    productId: string;
    /**
     * Return raw product (dev only)
     */
    raw?: boolean;
    /**
     * Fetch seatmaps from supplier (for flights)
     */
    seatmaps?: boolean;
    /**
     * Start date (YYYY-MM-DD hh:mm:00)
     */
    startDate?: string;
    /**
     * Unit of measuring distance (mi, km)
     */
    uom?: 'mi' | 'km';
};

export type GetProductsByProductIdResponse = Product;

export type GetProductsByProductIdSuggestionsData = {
    /**
     * Currency (for prices)
     */
    currency?: string;
    /**
     * Language (for localized fields)
     */
    language?: string;
    /**
     * Max number of suggestions (default 3)
     */
    limit?: number;
    /**
     * Product ID
     */
    productId: string;
    /**
     * Unit of measuring distance (mi, km)
     */
    uom?: 'mi' | 'km';
};

export type GetProductsByProductIdSuggestionsResponse = {
    results?: Array<Product>;
};

export type GetProductsByProductIdSeatmapData = {
    /**
     * Product ID
     */
    productId: string;
};

export type GetProductsByProductIdSeatmapResponse = string;

export type PostUsersData = {
    requestBody: {
        first_name?: string;
        last_name?: string;
        /**
         * must be unique
         */
        email: string;
        /**
         * At least one number and one letter
         */
        password?: string;
        phone_number?: string;
        phone_prefix?: string;
        country?: string;
        language?: string;
        currency?: string;
        distance?: string;
        captcha_token?: string;
    };
};

export type PostUsersResponse = User;

export type GetUsersResponse = User;

export type PatchUsersData = {
    requestBody: {
        first_name?: string;
        last_name?: string;
        /**
         * must be unique
         */
        email?: string;
        /**
         * At least one number and one letter
         */
        password?: string;
        phone_number?: string;
        phone_prefix?: string;
        country?: string;
        language?: string;
        currency?: string;
        distance?: string;
    };
};

export type PatchUsersResponse = User;

export type DeleteUsersResponse = void;

export type $OpenApiTs = {
    '/auth/login': {
        post: {
            req: PostAuthLoginData;
            res: {
                /**
                 * OK
                 */
                200: {
                    tokens?: AuthTokens;
                };
                /**
                 * Invalid email or password
                 */
                401: Error;
            };
        };
    };
    '/auth/logout': {
        post: {
            req: PostAuthLogoutData;
            res: {
                /**
                 * OK
                 */
                200: {
                    success?: boolean;
                };
                /**
                 * Not found
                 */
                404: Error;
            };
        };
    };
    '/auth/refresh-tokens': {
        post: {
            req: PostAuthRefreshTokensData;
            res: {
                /**
                 * OK
                 */
                200: AuthTokens;
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
    };
    '/auth/forgot-password': {
        post: {
            req: PostAuthForgotPasswordData;
            res: {
                /**
                 * OK
                 */
                200: {
                    success?: boolean;
                };
                /**
                 * Forbidden
                 */
                403: Error;
                /**
                 * Not found
                 */
                404: Error;
            };
        };
    };
    '/auth/reset-password': {
        post: {
            req: PostAuthResetPasswordData;
            res: {
                /**
                 * OK
                 */
                200: {
                    success?: boolean;
                };
                /**
                 * Password reset failed
                 */
                401: Error;
            };
        };
    };
    '/auth/send-verification-email': {
        post: {
            req: PostAuthSendVerificationEmailData;
            res: {
                /**
                 * OK
                 */
                200: {
                    success?: boolean;
                };
                /**
                 * Not found
                 */
                404: Error;
            };
        };
    };
    '/auth/send-verification-email-reset-password': {
        post: {
            req: PostAuthSendVerificationEmailResetPasswordData;
            res: {
                /**
                 * OK
                 */
                200: {
                    success?: boolean;
                };
                /**
                 * Not found
                 */
                404: Error;
            };
        };
    };
    '/auth/verify-email': {
        post: {
            req: PostAuthVerifyEmailData;
            res: {
                /**
                 * OK
                 */
                200: {
                    success?: boolean;
                };
                /**
                 * verify email failed
                 */
                401: Error;
            };
        };
    };
    '/bookings/user': {
        get: {
            req: GetBookingsUserData;
            res: {
                /**
                 * OK
                 */
                200: {
                    results?: Array<Booking>;
                    page?: number;
                    limit?: number;
                    total?: number;
                };
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Forbidden
                 */
                403: Error;
                /**
                 * Not found
                 */
                404: Error;
            };
        };
    };
    '/bookings/find': {
        post: {
            req: PostBookingsFindData;
            res: {
                /**
                 * OK
                 */
                200: Booking;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Forbidden
                 */
                403: Error;
                /**
                 * Not found
                 */
                404: Error;
            };
        };
    };
    '/bookings/{bookingId}': {
        get: {
            req: GetBookingsByBookingIdData;
            res: {
                /**
                 * OK
                 */
                200: Booking;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Forbidden
                 */
                403: Error;
                /**
                 * Not found
                 */
                404: Error;
            };
        };
    };
    '/bookings/{bookingId}/cancel': {
        post: {
            req: PostBookingsByBookingIdCancelData;
            res: {
                /**
                 * OK
                 */
                200: {
                    success?: boolean;
                    /**
                     * Error message
                     */
                    error?: string;
                };
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Forbidden
                 */
                403: Error;
                /**
                 * Not found
                 */
                404: Error;
            };
        };
    };
    '/bookings/{bookingId}/items/{bookingItemId}/cancel': {
        post: {
            req: PostBookingsByBookingIdItemsByBookingItemIdCancelData;
            res: {
                /**
                 * OK
                 */
                200: {
                    success?: boolean;
                    /**
                     * Error message
                     */
                    error?: string;
                };
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Forbidden
                 */
                403: Error;
                /**
                 * Not found
                 */
                404: Error;
            };
        };
    };
    '/cart': {
        post: {
            req: PostCartData;
            res: {
                /**
                 * OK
                 */
                201: Cart;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Forbidden
                 */
                403: Error;
                /**
                 * Not found
                 */
                404: Error;
            };
        };
    };
    '/cart/{cartId}': {
        get: {
            req: GetCartByCartIdData;
            res: {
                /**
                 * OK
                 */
                200: Cart;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Forbidden
                 */
                403: Error;
                /**
                 * Not found
                 */
                404: Error;
            };
        };
        patch: {
            req: PatchCartByCartIdData;
            res: {
                /**
                 * OK
                 */
                200: Cart;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Forbidden
                 */
                403: Error;
                /**
                 * Not found
                 */
                404: Error;
            };
        };
        delete: {
            req: DeleteCartByCartIdData;
            res: {
                /**
                 * No content
                 */
                200: unknown;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Forbidden
                 */
                403: Error;
                /**
                 * Not found
                 */
                404: Error;
            };
        };
    };
    '/cart/{cartId}/items': {
        post: {
            req: PostCartByCartIdItemsData;
            res: {
                /**
                 * OK
                 */
                201: Cart;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Forbidden
                 */
                403: Error;
                /**
                 * Not found
                 */
                404: Error;
            };
        };
    };
    '/cart/{cartId}/items/{cartItemId}': {
        get: {
            req: GetCartByCartIdItemsByCartItemIdData;
            res: {
                /**
                 * OK
                 */
                200: CartItem;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Forbidden
                 */
                403: Error;
                /**
                 * Not found
                 */
                404: Error;
            };
        };
        patch: {
            req: PatchCartByCartIdItemsByCartItemIdData;
            res: {
                /**
                 * OK
                 */
                200: Cart;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Forbidden
                 */
                403: Error;
                /**
                 * Not found
                 */
                404: Error;
            };
        };
        delete: {
            req: DeleteCartByCartIdItemsByCartItemIdData;
            res: {
                /**
                 * OK
                 */
                200: Cart;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Forbidden
                 */
                403: Error;
                /**
                 * Not found
                 */
                404: Error;
            };
        };
    };
    '/checkout': {
        post: {
            req: PostCheckoutData;
            res: {
                /**
                 * OK
                 */
                200: Checkout;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Forbidden
                 */
                403: Error;
                /**
                 * Not found
                 */
                404: Error;
            };
        };
    };
    '/checkout/{bookingId}': {
        post: {
            req: PostCheckoutByBookingIdData;
            res: {
                /**
                 * OK
                 */
                200: Booking;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Forbidden
                 */
                403: Error;
                /**
                 * Not found
                 */
                404: Error;
            };
        };
    };
    '/config': {
        get: {
            req: GetConfigData;
            res: {
                /**
                 * OK
                 */
                201: {
                    tenant?: Tenant;
                    api_key?: ApiKey;
                    categories?: Array<Category>;
                    config_web?: ConfigWeb;
                    config_mobile?: ConfigMobile;
                };
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Forbidden
                 */
                403: Error;
                /**
                 * Not found
                 */
                404: Error;
            };
        };
    };
    '/config/web': {
        get: {
            req: GetConfigWebData;
            res: {
                /**
                 * OK
                 */
                201: {
                    tenant?: Tenant;
                    api_key?: ApiKey;
                    categories?: Array<Category>;
                    config_web?: ConfigWeb;
                };
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Forbidden
                 */
                403: Error;
                /**
                 * Not found
                 */
                404: Error;
            };
        };
    };
    '/config/mobile': {
        get: {
            req: GetConfigMobileData;
            res: {
                /**
                 * OK
                 */
                201: {
                    tenant?: Tenant;
                    api_key?: ApiKey;
                    categories?: Array<Category>;
                    config_mobile?: ConfigMobile;
                };
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Forbidden
                 */
                403: Error;
                /**
                 * Not found
                 */
                404: Error;
            };
        };
    };
    '/locations/search': {
        post: {
            req: PostLocationsSearchData;
            res: {
                /**
                 * OK
                 */
                200: {
                    results?: Array<Location>;
                };
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Forbidden
                 */
                403: Error;
                /**
                 * Not found
                 */
                404: Error;
            };
        };
    };
    '/locations/{locationId}': {
        get: {
            req: GetLocationsByLocationIdData;
            res: {
                /**
                 * OK
                 */
                200: Location;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Forbidden
                 */
                403: Error;
                /**
                 * Not found
                 */
                404: Error;
            };
        };
    };
    '/products/search/flights': {
        post: {
            req: PostProductsSearchFlightsData;
            res: {
                /**
                 * OK
                 */
                200: {
                    search?: Search;
                    results?: Array<Product>;
                    page?: number;
                    limit?: number;
                    total?: number;
                };
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Forbidden
                 */
                403: Error;
                /**
                 * Not found
                 */
                404: Error;
            };
        };
    };
    '/products/search/hotels': {
        post: {
            req: PostProductsSearchHotelsData;
            res: {
                /**
                 * OK
                 */
                200: {
                    search?: Search;
                    results?: Array<Product>;
                    page?: number;
                    limit?: number;
                    total?: number;
                };
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Forbidden
                 */
                403: Error;
                /**
                 * Not found
                 */
                404: Error;
            };
        };
    };
    '/products/search/car-rental': {
        post: {
            req: PostProductsSearchCarRentalData;
            res: {
                /**
                 * OK
                 */
                200: {
                    search?: Search;
                    results?: Array<Product>;
                    page?: number;
                    limit?: number;
                    total?: number;
                };
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Forbidden
                 */
                403: Error;
                /**
                 * Not found
                 */
                404: Error;
            };
        };
    };
    '/products/search/transportation': {
        post: {
            req: PostProductsSearchTransportationData;
            res: {
                /**
                 * OK
                 */
                200: {
                    search?: Search;
                    results?: Array<Product>;
                    page?: number;
                    limit?: number;
                    total?: number;
                };
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Forbidden
                 */
                403: Error;
                /**
                 * Not found
                 */
                404: Error;
            };
        };
    };
    '/products/search/things-to-do': {
        post: {
            req: PostProductsSearchThingsToDoData;
            res: {
                /**
                 * OK
                 */
                200: {
                    search?: Search;
                    results?: Array<Product>;
                    page?: number;
                    limit?: number;
                    total?: number;
                };
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Forbidden
                 */
                403: Error;
                /**
                 * Not found
                 */
                404: Error;
            };
        };
    };
    '/products/search/shows-events': {
        post: {
            req: PostProductsSearchShowsEventsData;
            res: {
                /**
                 * OK
                 */
                200: {
                    search?: Search;
                    results?: Array<Product>;
                    page?: number;
                    limit?: number;
                    total?: number;
                };
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Forbidden
                 */
                403: Error;
                /**
                 * Not found
                 */
                404: Error;
            };
        };
    };
    '/products/search/dining': {
        post: {
            req: PostProductsSearchDiningData;
            res: {
                /**
                 * OK
                 */
                200: {
                    search?: Search;
                    results?: Array<Product>;
                    page?: number;
                    limit?: number;
                    total?: number;
                };
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Forbidden
                 */
                403: Error;
                /**
                 * Not found
                 */
                404: Error;
            };
        };
    };
    '/products/search/parking': {
        post: {
            req: PostProductsSearchParkingData;
            res: {
                /**
                 * OK
                 */
                200: {
                    search?: Search;
                    results?: Array<Product>;
                    page?: number;
                    limit?: number;
                    total?: number;
                };
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Forbidden
                 */
                403: Error;
                /**
                 * Not found
                 */
                404: Error;
            };
        };
    };
    '/products/search/{categorySlug}': {
        post: {
            req: PostProductsSearchByCategorySlugData;
            res: {
                /**
                 * OK
                 */
                200: {
                    search?: Search;
                    results?: Array<Product>;
                    page?: number;
                    limit?: number;
                    total?: number;
                };
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Forbidden
                 */
                403: Error;
                /**
                 * Not found
                 */
                404: Error;
            };
        };
    };
    '/products/search/poll/{searchId}': {
        post: {
            req: PostProductsSearchPollBySearchIdData;
            res: {
                /**
                 * OK
                 */
                200: {
                    search?: Search;
                    results?: Array<Product>;
                    page?: number;
                    limit?: number;
                    total?: number;
                };
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Forbidden
                 */
                403: Error;
                /**
                 * Not found
                 */
                404: Error;
            };
        };
    };
    '/products/{productId}': {
        get: {
            req: GetProductsByProductIdData;
            res: {
                /**
                 * OK
                 */
                200: Product;
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Forbidden
                 */
                403: Error;
                /**
                 * Not found
                 */
                404: Error;
            };
        };
    };
    '/products/{productId}/suggestions': {
        get: {
            req: GetProductsByProductIdSuggestionsData;
            res: {
                /**
                 * OK
                 */
                200: {
                    results?: Array<Product>;
                };
                /**
                 * Unauthorized
                 */
                401: Error;
                /**
                 * Forbidden
                 */
                403: Error;
                /**
                 * Not found
                 */
                404: Error;
            };
        };
    };
    '/products/{productId}/seatmap': {
        get: {
            req: GetProductsByProductIdSeatmapData;
            res: {
                /**
                 * OK
                 */
                200: string;
            };
        };
    };
    '/users': {
        post: {
            req: PostUsersData;
            res: {
                /**
                 * Created
                 */
                201: User;
                /**
                 * Email already taken
                 */
                400: Error;
            };
        };
        get: {
            res: {
                /**
                 * OK
                 */
                200: User;
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
        patch: {
            req: PatchUsersData;
            res: {
                /**
                 * OK
                 */
                200: User;
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
        delete: {
            res: {
                /**
                 * No content
                 */
                204: void;
                /**
                 * Unauthorized
                 */
                401: Error;
            };
        };
    };
};