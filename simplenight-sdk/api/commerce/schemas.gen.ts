// This file is auto-generated by @hey-api/openapi-ts

export const $Company = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        name: {
            type: 'string',
            nullable: false
        },
        status: {
            type: 'string',
            enum: ['Active', 'Inactive'],
            default: 'Active'
        }
    }
} as const;

export const $Tenant = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        company_id: {
            type: 'string',
            nullable: false
        },
        name: {
            type: 'string',
            nullable: false
        },
        slug: {
            type: 'string',
            nullable: false
        },
        url: {
            type: 'string',
            nullable: false
        },
        status: {
            type: 'string',
            enum: ['Active', 'Inactive'],
            default: 'Active'
        },
        login: {
            type: 'string',
            enum: ['Public', 'Restricted'],
            default: 'Public',
            description: 'Tenant access public or restricted to logged in users only'
        },
        register: {
            type: 'string',
            enum: ['Public', 'Restricted'],
            default: 'Public',
            description: 'Tenant sign up public or restricted to certain domains or emails only'
        },
        register_restrictions: {
            type: 'object',
            nullable: true,
            description: 'Tenant sign up restricted to a list of domains or emails'
        },
        allow_booking_on_supplier: {
            type: 'boolean',
            default: true,
            description: 'Allow booking on supplier site. If False, bookings will be mocked without real supplier calls'
        }
    }
} as const;

export const $ApiKey = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        tenant_id: {
            type: 'string',
            nullable: false,
            description: 'Tenant ID'
        },
        name: {
            type: 'string',
            nullable: false,
            description: 'Name'
        },
        status: {
            type: 'string',
            enum: ['Active', 'Inactive'],
            default: 'Active',
            description: 'Status'
        },
        scope: {
            type: 'string',
            enum: ['Api', 'Web', 'Mobile'],
            default: 'Active',
            description: 'Key used only for Web WL or for Mobile App or for API direct access'
        },
        hash_key: {
            type: 'string',
            nullable: false,
            description: 'Secret key'
        },
        text_key: {
            type: 'string',
            nullable: false,
            description: 'Public key'
        },
        usage: {
            type: 'object',
            nullable: true,
            description: 'Usage log by day'
        },
        usage_limit: {
            type: 'integer',
            default: 999999,
            description: 'Usage limit'
        }
    }
} as const;

export const $ConfigWeb = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        tenant_id: {
            type: 'string',
            nullable: false
        },
        name: {
            type: 'string'
        },
        slogan: {
            type: 'string',
            description: 'Localized'
        },
        phone_prefix: {
            type: 'string'
        },
        phone_number: {
            type: 'string'
        },
        email: {
            type: 'string'
        },
        social: {
            type: 'object',
            description: 'Social media URLs'
        },
        logo: {
            type: 'string'
        },
        icon: {
            type: 'string'
        },
        colors: {
            type: 'object',
            description: 'Colors'
        },
        images: {
            type: 'object',
            description: 'Background images'
        },
        language: {
            type: 'string',
            default: 'en',
            description: 'Default language'
        },
        languages: {
            type: 'string',
            default: 'en',
            description: 'Available translations'
        },
        currency: {
            type: 'string',
            default: 'USD',
            description: 'Default currency'
        },
        currencies: {
            type: 'string',
            default: 'USD',
            description: 'Available currencies'
        },
        country: {
            type: 'string',
            default: 'US',
            description: 'Default country'
        },
        distance: {
            type: 'string',
            default: 'mi',
            description: 'Default metric system unit - mi/km'
        },
        terms: {
            type: 'string',
            description: 'Terms page (localized content)'
        },
        privacy: {
            type: 'object',
            description: 'Privacy page (localized content)'
        },
        recaptcha_site_key: {
            type: 'string',
            nullable: true,
            description: 'Google Recaptcha site key'
        }
    }
} as const;

export const $ConfigMobile = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        tenant_id: {
            type: 'string',
            nullable: false
        },
        name: {
            type: 'string'
        },
        slogan: {
            type: 'string',
            description: 'Localized'
        },
        phone_prefix: {
            type: 'string'
        },
        phone_number: {
            type: 'string'
        },
        email: {
            type: 'string'
        },
        social: {
            type: 'object',
            description: 'Social media URLs'
        },
        logo: {
            type: 'string'
        },
        icon: {
            type: 'string'
        },
        colors: {
            type: 'object',
            description: 'Colors'
        },
        images: {
            type: 'object',
            description: 'Background images'
        },
        language: {
            type: 'string',
            default: 'en',
            description: 'Default language'
        },
        languages: {
            type: 'string',
            default: 'en',
            description: 'Available translations'
        },
        currency: {
            type: 'string',
            default: 'USD',
            description: 'Default currency'
        },
        currencies: {
            type: 'string',
            default: 'USD',
            description: 'Available currencies'
        },
        country: {
            type: 'string',
            default: 'US',
            description: 'Default country'
        },
        distance: {
            type: 'string',
            default: 'mi',
            description: 'Default metric system unit - mi/km'
        },
        terms: {
            type: 'object',
            description: 'Terms page (localized URL)'
        },
        privacy: {
            type: 'object',
            description: 'Privacy page (localized URL)'
        }
    }
} as const;

export const $Category = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        tenant_id: {
            type: 'string',
            nullable: false
        },
        name: {
            type: 'string',
            description: 'Localized',
            nullable: false
        },
        slug: {
            type: 'string',
            nullable: false
        },
        icon: {
            type: 'string',
            nullable: true
        },
        sort: {
            type: 'number',
            default: 0,
            nullable: false
        },
        status: {
            type: 'string',
            enum: ['Active', 'Inactive'],
            default: 'Active',
            nullable: false
        },
        product_attributes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProductAttribute'
            },
            nullable: true
        },
        variant_attributes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProductAttribute'
            },
            nullable: true
        }
    }
} as const;

export const $ProductAttribute = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        category_id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        name: {
            type: 'string',
            nullable: false
        },
        slug: {
            type: 'string',
            nullable: false
        },
        type: {
            type: 'string',
            enum: ['Short Text', 'Long Text', 'Rich Text', 'Boolean', 'Number', 'Date', 'Time', 'Single Select', 'Multi Select'],
            nullable: false
        },
        options: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: false
        },
        required: {
            type: 'boolean',
            default: false
        },
        localized: {
            type: 'boolean',
            default: false
        },
        filterable: {
            type: 'boolean',
            default: false
        },
        sortable: {
            type: 'boolean',
            default: false
        },
        supplier_mapping: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        }
    }
} as const;

export const $VariantAttribute = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        category_id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        name: {
            type: 'string',
            nullable: false
        },
        slug: {
            type: 'string',
            nullable: false
        },
        type: {
            type: 'string',
            enum: ['Short Text', 'Long Text', 'Rich Text', 'Boolean', 'Number', 'Date', 'Time', 'Single Select', 'Multi Select'],
            nullable: false
        },
        options: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: false
        },
        required: {
            type: 'boolean',
            default: false
        },
        localized: {
            type: 'boolean',
            default: false
        },
        filterable: {
            type: 'boolean',
            default: false
        },
        sortable: {
            type: 'boolean',
            default: false
        },
        supplier_mapping: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: false
        }
    }
} as const;

export const $Supplier = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        tenant_id: {
            type: 'string',
            nullable: false
        },
        name: {
            type: 'string',
            description: 'Localized'
        },
        slug: {
            type: 'string'
        },
        status: {
            type: 'string',
            enum: ['Active', 'Inactive'],
            default: 'Active'
        },
        payment_method: {
            type: 'string',
            enum: ['Virtual Card', 'Virtual Card On Request', 'Customer Card', 'Free', 'Offline'],
            default: 'Virtual Card',
            nullable: true
        },
        credentials: {
            type: 'object',
            description: 'Credentials object'
        },
        cache: {
            type: 'object',
            description: 'Cache (token, ...)'
        }
    }
} as const;

export const $SupplierCategory = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        tenant_id: {
            type: 'string',
            nullable: false
        },
        supplier_id: {
            type: 'string',
            nullable: false
        },
        category_id: {
            type: 'string',
            nullable: false
        },
        status: {
            type: 'string',
            enum: ['Active', 'Inactive'],
            default: 'Active'
        },
        type: {
            type: 'string',
            enum: ['Net', 'Commissionable'],
            default: 'Active'
        },
        markup: {
            type: 'number',
            default: 0
        },
        discount: {
            type: 'number',
            default: 0
        }
    }
} as const;

export const $Location = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            nullable: false
        },
        name: {
            type: 'string',
            nullable: false,
            description: 'Location name'
        },
        address: {
            type: 'string',
            nullable: true,
            description: 'Location address'
        },
        type: {
            type: 'string',
            nullable: true,
            description: 'Location type(s)'
        },
        code: {
            type: 'string',
            nullable: true,
            description: 'Airport code (if applies)'
        },
        latitude: {
            type: 'number',
            format: 'float',
            nullable: true,
            description: 'Location latitude'
        },
        longitude: {
            type: 'number',
            format: 'float',
            nullable: true,
            description: 'Location longitude'
        },
        image: {
            type: 'string',
            nullable: false,
            description: 'Location image'
        }
    }
} as const;

export const $FeeCategory = {
    type: 'string',
    enum: ['RESORT_FEE', 'DEPOSIT', 'PET_FEE', 'PARKING_FEE', 'CLEANING_FEE', 'BREAKFAST_FEE', 'EXTRA_BED_FEE', 'SERVICE_FEE', 'AIRPORT_SHUTTLE_FEE', 'INTERNET_FEE', 'FACILITIES_FEE', 'UTILITY_FEE', 'TAX', 'OTHER']
} as const;

export const $FeeBreakdown = {
    type: 'object',
    properties: {
        category: {
            '$ref': '#/components/schemas/FeeCategory'
        },
        total_amount: {
            type: 'number'
        },
        mandatory: {
            type: 'boolean'
        }
    },
    required: ['category', 'totalAmount', 'mandatory']
} as const;

export const $Product = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true,
            description: 'Internal product ID'
        },
        static_id: {
            type: 'string',
            nullable: true,
            description: 'Static product ID'
        },
        ids: {
            type: 'string',
            nullable: true,
            description: 'Supplier product ID'
        },
        supplier: {
            type: 'string',
            nullable: true,
            description: 'Supplier slug'
        },
        supplier_env: {
            type: 'string',
            enum: ['sandbox', 'production'],
            nullable: true,
            description: 'Supplier mode'
        },
        category: {
            type: 'string',
            nullable: true,
            description: 'Category slug'
        },
        index: {
            type: 'number',
            nullable: true,
            description: 'Sort index'
        },
        name: {
            type: 'string',
            nullable: true,
            description: 'Product name'
        },
        description: {
            type: 'string',
            nullable: true,
            description: 'Product description'
        },
        address: {
            type: 'string',
            nullable: true,
            description: 'Product address'
        },
        latitude: {
            type: 'number',
            format: 'float',
            nullable: true,
            description: 'Product latitude'
        },
        longitude: {
            type: 'number',
            format: 'float',
            nullable: true,
            description: 'Product longitude'
        },
        distance: {
            type: 'number',
            format: 'float',
            nullable: true,
            description: 'Distance from search location'
        },
        distance_uom: {
            type: 'string',
            nullable: true,
            default: 'mi',
            description: 'Product unit of measure (km/mi)'
        },
        images: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true,
            description: 'Image urls array'
        },
        supplier_tax: {
            type: 'number',
            format: 'float',
            default: 0,
            nullable: true,
            description: 'Supplier tax amount'
        },
        supplier_price: {
            type: 'number',
            format: 'float',
            default: 0,
            nullable: true,
            description: 'Supplier price amount'
        },
        supplier_currency: {
            type: 'string',
            minLength: 3,
            maxLength: 3,
            nullable: true,
            default: 'USD',
            description: 'Supplier currency'
        },
        fee_breakdown: {
            type: 'array',
            format: 'float',
            items: {
                '$ref': '#/components/schemas/FeeBreakdown'
            }
        },
        tax: {
            type: 'number',
            format: 'float',
            default: 0,
            nullable: true,
            description: 'Total tax amount'
        },
        price: {
            type: 'number',
            format: 'float',
            default: 0,
            nullable: true,
            description: 'Total price amount'
        },
        pay_at_property: {
            type: 'number',
            format: 'float',
            default: 0,
            nullable: true
        },
        currency: {
            type: 'string',
            minLength: 3,
            maxLength: 3,
            nullable: true,
            default: 'USD',
            description: 'Currency'
        },
        price_description: {
            type: 'string',
            nullable: true,
            description: 'Price description'
        },
        free_cancellation: {
            type: 'boolean',
            default: false,
            nullable: true,
            description: 'Free Cancelation (true/false)'
        },
        rating: {
            type: 'integer',
            default: 0,
            nullable: true,
            description: 'Rating'
        },
        reviews: {
            type: 'integer',
            default: 0,
            nullable: true,
            description: 'Reviews number'
        },
        status: {
            type: 'string',
            nullable: true,
            description: 'Product status (Active/Inactive/Expired)'
        },
        attributes: {
            type: 'object',
            nullable: true,
            description: 'Custom category attributes'
        },
        flights: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProductFlight'
            },
            nullable: true
        },
        rooms: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProductRoom'
            },
            nullable: true
        },
        variants: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProductVariant'
            },
            nullable: true
        },
        tickets: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProductTicket'
            },
            nullable: true
        }
    }
} as const;

export const $ProductVariant = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true,
            description: 'Internal variant ID'
        },
        ids: {
            type: 'string',
            nullable: true,
            description: 'Supplier variant ID'
        },
        name: {
            type: 'string',
            nullable: false,
            description: 'Variant name'
        },
        description: {
            type: 'number',
            nullable: false,
            description: 'Variant description'
        },
        images: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true,
            description: 'Image urls array'
        },
        supplier_tax: {
            type: 'number',
            format: 'float',
            default: 0,
            nullable: true,
            description: 'Supplier tax amount'
        },
        supplier_price: {
            type: 'number',
            format: 'float',
            default: 0,
            nullable: true,
            description: 'Supplier price amount'
        },
        supplier_currency: {
            type: 'string',
            minLength: 3,
            maxLength: 3,
            nullable: true,
            default: 'USD',
            description: 'Supplier currency'
        },
        tax: {
            type: 'number',
            format: 'float',
            default: 0,
            nullable: true,
            description: 'Total tax amount'
        },
        price: {
            type: 'number',
            format: 'float',
            default: 0,
            nullable: true,
            description: 'Total price amount'
        },
        currency: {
            type: 'string',
            minLength: 3,
            maxLength: 3,
            nullable: true,
            default: 'USD',
            description: 'Currency'
        },
        price_description: {
            type: 'string',
            nullable: true,
            description: 'Price description'
        },
        free_cancellation: {
            type: 'boolean',
            default: false,
            nullable: true,
            description: 'Free Cancelation (true/false)'
        },
        attributes: {
            type: 'object',
            nullable: true,
            description: 'Custom category attributes'
        }
    }
} as const;

export const $ProductRoom = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true,
            description: 'Internal room ID'
        },
        ids: {
            type: 'string',
            nullable: true,
            description: 'Supplier room ID or booking key'
        },
        index: {
            type: 'number',
            nullable: true,
            description: 'Sort index'
        },
        name: {
            type: 'string',
            nullable: true,
            description: 'Room name'
        },
        description: {
            type: 'string',
            nullable: true,
            description: 'Room description'
        },
        bed: {
            type: 'string',
            nullable: true,
            description: 'Bed type'
        },
        view: {
            type: 'string',
            nullable: true,
            description: 'Room view'
        },
        images: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true,
            description: 'Image urls array'
        },
        supplier_tax: {
            type: 'number',
            format: 'float',
            default: 0,
            nullable: true,
            description: 'Supplier tax amount'
        },
        supplier_price: {
            type: 'number',
            format: 'float',
            default: 0,
            nullable: true,
            description: 'Supplier price amount'
        },
        supplier_currency: {
            type: 'string',
            minLength: 3,
            maxLength: 3,
            nullable: true,
            default: 'USD',
            description: 'Supplier currency'
        },
        fee_breakdown: {
            type: 'array',
            format: 'float',
            items: {
                '$ref': '#/components/schemas/FeeBreakdown'
            }
        },
        pay_at_property: {
            type: 'number',
            format: 'float',
            default: 0,
            nullable: true
        },
        tax: {
            type: 'number',
            format: 'float',
            default: 0,
            nullable: true,
            description: 'Total tax amount'
        },
        price: {
            type: 'number',
            format: 'float',
            default: 0,
            nullable: true,
            description: 'Total price amount'
        },
        currency: {
            type: 'string',
            minLength: 3,
            maxLength: 3,
            nullable: true,
            default: 'USD',
            description: 'Currency'
        },
        price_description: {
            type: 'string',
            nullable: true,
            description: 'Price description'
        },
        free_cancellation: {
            type: 'boolean',
            default: false,
            nullable: true,
            description: 'Free Cancelation (true/false)'
        },
        rate_key: {
            type: 'string',
            nullable: true,
            description: 'Supplier rate key'
        }
    }
} as const;

export const $ProductTicket = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: true,
            description: 'Internal ticket ID'
        },
        ids: {
            type: 'string',
            nullable: true,
            description: 'Supplier ticket ID'
        },
        index: {
            type: 'number',
            nullable: true,
            description: 'Sort index'
        },
        section: {
            type: 'string',
            nullable: true,
            description: 'Ticket section'
        },
        row: {
            type: 'string',
            nullable: true,
            description: 'Ticket row'
        },
        seat_low: {
            type: 'string',
            nullable: true,
            description: 'Ticket low seat'
        },
        seat_high: {
            type: 'string',
            nullable: true,
            description: 'Ticket low seat'
        },
        description: {
            type: 'string',
            nullable: true,
            description: 'Ticket section'
        },
        delivery: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true,
            description: 'Ticket delivery methods'
        },
        qty: {
            type: 'number',
            nullable: true,
            description: 'Max available quantity'
        },
        qtys: {
            type: 'array',
            items: {
                type: 'number'
            },
            nullable: true,
            description: 'Ticket purchasable quantities'
        },
        supplier_tax: {
            type: 'number',
            format: 'float',
            default: 0,
            nullable: true,
            description: 'Supplier tax amount'
        },
        supplier_price: {
            type: 'number',
            format: 'float',
            default: 0,
            nullable: true,
            description: 'Supplier price amount'
        },
        supplier_currency: {
            type: 'string',
            minLength: 3,
            maxLength: 3,
            nullable: true,
            default: 'USD',
            description: 'Supplier currency'
        },
        tax: {
            type: 'number',
            format: 'float',
            default: 0,
            nullable: true,
            description: 'Total tax amount'
        },
        price: {
            type: 'number',
            format: 'float',
            default: 0,
            nullable: true,
            description: 'Total price amount'
        },
        currency: {
            type: 'string',
            minLength: 3,
            maxLength: 3,
            nullable: true,
            default: 'USD',
            description: 'Currency'
        },
        price_description: {
            type: 'string',
            nullable: true,
            description: 'Price description'
        },
        free_cancellation: {
            type: 'boolean',
            default: false,
            nullable: true,
            description: 'Free Cancelation (true/false)'
        }
    }
} as const;

export const $ProductFlight = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            nullable: true,
            description: 'Leg ID'
        },
        duration: {
            type: 'integer',
            default: 0,
            nullable: true,
            description: 'Leg duration in minutes'
        },
        segments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/ProductFlightSegment'
            },
            nullable: true
        }
    }
} as const;

export const $ProductFlightSegment = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            nullable: true,
            description: 'Segment ID'
        },
        duration: {
            type: 'integer',
            default: 0,
            nullable: true,
            description: 'Segment duration in minutes'
        },
        stops: {
            type: 'integer',
            default: 0,
            nullable: true,
            description: 'Stops number'
        },
        aircraft: {
            type: 'string',
            nullable: true,
            description: 'Aircraft code'
        },
        aircraft_name: {
            type: 'string',
            nullable: true,
            description: 'Aircraft name'
        },
        airline: {
            type: 'string',
            nullable: true,
            description: 'Marketing airline code'
        },
        airline_name: {
            type: 'string',
            nullable: true,
            description: 'Marketing airline name'
        },
        airline_operating: {
            type: 'string',
            nullable: true,
            description: 'Operating airline code'
        },
        airline_operating_name: {
            type: 'string',
            nullable: true,
            description: 'Operating airline name'
        },
        flight_number: {
            type: 'string',
            nullable: true,
            description: 'Flight number'
        },
        start_date: {
            type: 'string',
            format: 'date-time',
            nullable: true,
            description: 'Departure date'
        },
        start_location: {
            type: 'string',
            minLength: 3,
            maxLength: 3,
            nullable: true,
            description: 'Departure IATA airport code'
        },
        start_location_name: {
            type: 'string',
            nullable: true,
            description: 'Departure airport name'
        },
        start_location_terminal: {
            type: 'string',
            nullable: true,
            description: 'Departure airport terminal'
        },
        end_date: {
            type: 'string',
            format: 'date-time',
            nullable: true,
            description: 'Arrival date'
        },
        end_location: {
            type: 'string',
            minLength: 3,
            maxLength: 3,
            nullable: true,
            description: 'Arrival IATA airport code'
        },
        end_location_name: {
            type: 'string',
            nullable: true,
            description: 'Arrival airport name'
        },
        end_location_terminal: {
            type: 'string',
            nullable: true,
            description: 'Arrival airport terminal'
        }
    }
} as const;

export const $ProductReview = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            nullable: true,
            description: 'Internal review ID'
        },
        ids: {
            type: 'string',
            nullable: true,
            description: 'Supplier review ID'
        },
        name: {
            type: 'string',
            nullable: true,
            description: 'User name'
        },
        image: {
            type: 'string',
            nullable: true,
            description: 'User image'
        },
        rating: {
            type: 'number',
            nullable: false,
            description: 'Rating score (1..10)'
        },
        review: {
            type: 'string',
            nullable: true,
            description: 'Review text'
        },
        date: {
            type: 'string',
            format: 'date-time',
            nullable: true,
            description: 'Review date and time'
        }
    }
} as const;

export const $Search = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        tenant_id: {
            type: 'string',
            nullable: false
        },
        user_id: {
            type: 'string',
            nullable: true
        },
        category_slug: {
            type: 'string',
            nullable: false,
            description: 'Category slug'
        },
        search_data: {
            '$ref': '#/components/schemas/SearchData',
            nullable: false,
            description: 'Search request params'
        },
        status: {
            type: 'string',
            enum: ['Pending', 'Complete'],
            default: 'Pending'
        },
        stats: {
            type: 'object',
            nullable: true,
            description: 'Search request statistics for each supplier call'
        }
    }
} as const;

export const $SearchResult = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        tenant_id: {
            type: 'string',
            nullable: false
        },
        user_id: {
            type: 'string',
            nullable: true
        },
        search_id: {
            type: 'string',
            nullable: false
        },
        category_slug: {
            type: 'string',
            nullable: false,
            description: 'Category slug'
        },
        supplier_slug: {
            type: 'string',
            nullable: false,
            description: 'Supplier slug'
        },
        item_data_raw: {
            type: 'object',
            nullable: true,
            description: 'Product data - raw from supplier'
        },
        item_data: {
            '$ref': '#/components/schemas/Product',
            nullable: true,
            description: 'Product data - normalized'
        }
    }
} as const;

export const $Cart = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        tenant_id: {
            type: 'string',
            nullable: false
        },
        user_id: {
            type: 'string',
            nullable: true
        },
        status: {
            type: 'string',
            enum: ['Active', 'Inactive'],
            default: 'Active'
        },
        total_tax: {
            type: 'number',
            format: 'float',
            default: 0
        },
        total_amount: {
            type: 'number',
            format: 'float',
            default: 0
        },
        total_currency: {
            type: 'string',
            maxLength: 3,
            default: 'USD'
        },
        first_name: {
            type: 'string',
            nullable: true
        },
        last_name: {
            type: 'string',
            nullable: true
        },
        phone_prefix: {
            type: 'string',
            nullable: true
        },
        phone_number: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            format: 'email',
            nullable: true
        },
        country: {
            type: 'string',
            nullable: true
        },
        cart_items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/CartItem'
            },
            nullable: false
        }
    }
} as const;

export const $CartItem = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        tenant_id: {
            type: 'string',
            nullable: false
        },
        user_id: {
            type: 'string',
            nullable: true
        },
        cart_id: {
            type: 'string',
            nullable: false
        },
        category_slug: {
            type: 'string',
            nullable: false
        },
        supplier_slug: {
            type: 'string',
            nullable: false
        },
        status: {
            type: 'string',
            enum: ['Active', 'Inactive'],
            default: 'Active'
        },
        qty: {
            type: 'integer',
            default: 1
        },
        total_tax: {
            type: 'number',
            format: 'float',
            default: 0
        },
        total_amount: {
            type: 'number',
            format: 'float',
            default: 0
        },
        total_currency: {
            type: 'string',
            maxLength: 3,
            default: 'USD'
        },
        search_data: {
            '$ref': '#/components/schemas/SearchData',
            description: 'Search params at the time of booking'
        },
        item_data_raw: {
            type: 'object',
            nullable: true,
            description: 'Raw search result at the time of booking'
        },
        item_data: {
            '$ref': '#/components/schemas/Product',
            description: 'Normalized search result at the time of booking'
        },
        booking_data: {
            '$ref': '#/components/schemas/BookingData',
            description: 'Specific booking data (passengers, seats, room, ...)'
        }
    }
} as const;

export const $SearchData = {
    type: 'object',
    properties: {
        start_location: {
            type: 'string',
            nullable: false,
            description: 'Start Location (lat,lng or airport code)'
        },
        end_location: {
            type: 'string',
            nullable: true,
            description: 'End Location (lat,lng or airport code)'
        },
        start_date: {
            type: 'string',
            nullable: false,
            description: 'Start date - YYYY-MM-DD'
        },
        end_date: {
            type: 'string',
            nullable: true,
            description: 'End date - YYYY-MM-DD'
        },
        adults: {
            type: 'number',
            nullable: true,
            description: 'Number of adults'
        },
        children: {
            type: 'number',
            nullable: true,
            description: 'Number of children'
        },
        infants: {
            type: 'number',
            nullable: true,
            description: 'Number of infants on lap'
        },
        infants_seated: {
            type: 'number',
            nullable: true,
            description: 'Number of infants with own seat'
        },
        direction: {
            type: 'string',
            enum: ['OneWay', 'RoundTrip', 'MultiCity'],
            nullable: true,
            description: 'Direction (OneWay, RoundTrip, MultiCity)'
        },
        cabin: {
            type: 'string',
            enum: ['PremiumFirst', 'First', 'PremiumBusiness', 'Business', 'PremiumEconomy', 'Economy'],
            nullable: true,
            description: 'Cabin (PremiumFirst, First, PremiumBusiness, Business, PremiumEconomy, Economy)'
        },
        filters: {
            type: 'object',
            nullable: true,
            description: 'Filter by attributes'
        },
        sort: {
            type: 'string',
            enum: ['id', 'ids', 'supplier', 'name', 'distance', 'tax', 'price', 'free_cancellation'],
            nullable: true,
            description: 'Sort by field name'
        },
        order: {
            type: 'string',
            enum: ['asc', 'desc'],
            nullable: true,
            description: 'Order ASC or DESC'
        },
        page: {
            type: 'number',
            nullable: true,
            description: 'Pagination - page number'
        },
        limit: {
            type: 'number',
            nullable: true,
            description: 'Pagination - items per page'
        },
        include: {
            type: 'string',
            nullable: true,
            description: 'Comma delimited fields to include in response'
        },
        exclude: {
            type: 'string',
            nullable: true,
            description: 'Comma delimited fields to exclude from response'
        },
        poll: {
            type: 'boolean',
            nullable: true,
            description: 'Poll results by search id later or wait for response from all supplierse'
        },
        browser: {
            type: 'string',
            nullable: true,
            description: 'User browser'
        },
        ip: {
            type: 'string',
            nullable: true,
            description: 'User IP'
        },
        language: {
            type: 'string',
            nullable: true,
            description: 'Language'
        },
        currency: {
            type: 'string',
            nullable: true,
            description: 'Currency'
        },
        uom: {
            type: 'string',
            nullable: true,
            description: 'Unit of measure (km/mi)'
        }
    }
} as const;

export const $BookingData = {
    type: 'object',
    properties: {
        room_id: {
            type: 'string',
            nullable: true,
            description: 'Hotels - selected room'
        },
        variant_id: {
            type: 'string',
            nullable: true,
            description: 'ThingsToDo - selected variant'
        },
        availability_id: {
            type: 'string',
            nullable: true,
            description: 'ThingsToDo - selected availability'
        },
        ticket_id: {
            type: 'string',
            nullable: true,
            description: 'Events - selected ticket'
        },
        qty: {
            type: 'number',
            nullable: true,
            default: 1,
            description: 'Qty of selected ticket or room or variant'
        },
        booking_key: {
            type: 'string',
            nullable: true,
            description: 'Hotels and Cars - booking key'
        },
        booking_url: {
            type: 'string',
            nullable: true,
            description: 'Ticket or Voucher URL'
        },
        passengers: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Passenger'
            },
            nullable: true,
            description: 'Flights - passengers information'
        },
        seats: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/PassengerSeat'
            },
            nullable: true,
            description: 'Flights - selected seats'
        },
        booking_questions: {
            type: 'object',
            nullable: true,
            description: 'Booking questions'
        }
    }
} as const;

export const $PassengerSeat = {
    type: 'object',
    properties: {
        passenger_id: {
            type: 'string',
            nullable: false
        },
        segment_id: {
            type: 'string',
            nullable: false
        },
        seat: {
            type: 'string',
            nullable: false
        },
        tax: {
            type: 'number',
            format: 'float',
            nullable: false,
            default: 0
        },
        price: {
            type: 'number',
            format: 'float',
            nullable: false,
            default: 0
        },
        currency: {
            type: 'string',
            maxLength: 3,
            nullable: false,
            default: 'USD'
        }
    }
} as const;

export const $Passenger = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            nullable: false
        },
        type: {
            type: 'string',
            enum: ['Adult', 'Child', 'Infant', 'InfantSeated'],
            nullable: false
        },
        title: {
            type: 'string',
            enum: ['Mr.', 'Ms.', 'Mrs.', 'Miss'],
            nullable: true
        },
        first_name: {
            type: 'string',
            nullable: false
        },
        middle_name: {
            type: 'string',
            nullable: true
        },
        last_name: {
            type: 'string',
            nullable: false
        },
        dob: {
            type: 'string',
            format: 'date',
            nullable: false
        },
        gender: {
            type: 'string',
            enum: ['Male', 'Female'],
            nullable: false
        },
        country: {
            type: 'string',
            nullable: false
        },
        passport_country: {
            type: 'string',
            nullable: true
        },
        passport_number: {
            type: 'string',
            nullable: true
        },
        passport_expiration: {
            type: 'string',
            nullable: true
        },
        loyalty_program: {
            type: 'string',
            nullable: true
        },
        loyalty_number: {
            type: 'string',
            nullable: true
        },
        loyalty_tsa: {
            type: 'string',
            nullable: true
        },
        loyalty_redress: {
            type: 'string',
            nullable: true
        }
    }
} as const;

export const $Checkout = {
    type: 'object',
    properties: {
        errors: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: true
        },
        redirect_url: {
            type: 'string',
            nullable: true
        },
        booking: {
            '$ref': '#/components/schemas/Booking',
            nullable: true
        }
    }
} as const;

export const $BookingConfirmation = {
    type: 'object',
    properties: {
        error: {
            type: 'string',
            nullable: true
        },
        booking_ref: {
            type: 'string',
            nullable: true
        }
    }
} as const;

export const $Booking = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        tenant_id: {
            type: 'string',
            nullable: false
        },
        user_id: {
            type: 'string',
            nullable: true
        },
        session_id: {
            type: 'string',
            nullable: true
        },
        status: {
            type: 'string',
            enum: ['Pending', 'Booked Partial', 'Booked', 'Error', 'Canceled Partial', 'Canceled'],
            nullable: false,
            default: 'Pending'
        },
        status_acquiring: {
            type: 'string',
            enum: ['Acquiring', 'Acquired', 'Error'],
            nullable: true
        },
        status_acquiring_3ds: {
            type: 'string',
            enum: ['3DS Pending', '3DS Success', '3DS Error'],
            nullable: true
        },
        status_refunding: {
            type: 'string',
            enum: ['Refunding', 'Refunded Partial', 'Refunded', 'Error'],
            nullable: true
        },
        cancel_reason: {
            type: 'string',
            nullable: true
        },
        supplier_total_amount: {
            type: 'number',
            format: 'float',
            default: 0,
            nullable: false
        },
        supplier_total_currency: {
            type: 'string',
            maxLength: 3,
            nullable: false,
            default: 'USD'
        },
        total_tax: {
            type: 'number',
            format: 'float',
            default: 0,
            nullable: false
        },
        total_amount: {
            type: 'number',
            format: 'float',
            default: 0,
            nullable: false
        },
        total_currency: {
            type: 'string',
            maxLength: 3,
            nullable: false,
            default: 'USD'
        },
        total_checkout_tax: {
            type: 'number',
            format: 'float',
            default: 0,
            nullable: false
        },
        total_checkout_amount: {
            type: 'number',
            format: 'float',
            default: 0,
            nullable: false
        },
        total_checkout_currency: {
            type: 'string',
            maxLength: 3,
            nullable: false,
            default: 'USD'
        },
        refund_total_amount: {
            type: 'number',
            format: 'float',
            default: 0,
            nullable: true
        },
        refund_total_currency: {
            type: 'string',
            maxLength: 3,
            nullable: true,
            default: 'USD'
        },
        customer_ref: {
            type: 'string',
            nullable: true
        },
        booking_ref: {
            type: 'string',
            nullable: true
        },
        virtual_card_id: {
            type: 'string',
            nullable: true
        },
        first_name: {
            type: 'string',
            nullable: true
        },
        last_name: {
            type: 'string',
            nullable: true
        },
        phone_prefix: {
            type: 'string',
            nullable: true
        },
        phone_number: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            format: 'email',
            nullable: false
        },
        country: {
            type: 'string',
            nullable: true
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            nullable: false
        },
        booking_items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/BookingItem'
            },
            nullable: false
        },
        payments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Payment'
            },
            nullable: true
        }
    }
} as const;

export const $BookingItem = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        tenant_id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        booking_id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        category_slug: {
            type: 'string',
            nullable: false
        },
        supplier_slug: {
            type: 'string',
            nullable: false
        },
        supplier_booking_id: {
            type: 'string',
            nullable: true
        },
        supplier_booking_ref: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        qty: {
            type: 'integer',
            default: 1
        },
        status: {
            type: 'string',
            enum: ['Pending', 'Booked', 'Error', 'Canceled'],
            nullable: false,
            default: 'Pending'
        },
        status_issuing: {
            type: 'string',
            enum: ['Issuing', 'Issued', 'Error'],
            nullable: true
        },
        status_booking: {
            type: 'string',
            enum: ['Booking', 'Booked', 'Error'],
            nullable: true
        },
        status_canceling: {
            type: 'string',
            enum: ['Canceling', 'Canceled', 'Error'],
            nullable: true
        },
        status_refunding: {
            type: 'string',
            enum: ['Refunding', 'Refunded', 'Error'],
            nullable: true
        },
        cancel_reason: {
            type: 'string',
            nullable: true
        },
        supplier_total_amount: {
            type: 'number',
            format: 'float',
            default: 0,
            nullable: false
        },
        supplier_total_currency: {
            type: 'string',
            maxLength: 3,
            nullable: false,
            default: 'USD'
        },
        total_tax: {
            type: 'number',
            format: 'float',
            default: 0,
            nullable: false
        },
        total_amount: {
            type: 'number',
            format: 'float',
            default: 0,
            nullable: false
        },
        total_currency: {
            type: 'string',
            maxLength: 3,
            nullable: false,
            default: 'USD'
        },
        total_checkout_tax: {
            type: 'number',
            format: 'float',
            default: 0,
            nullable: false
        },
        total_checkout_amount: {
            type: 'number',
            format: 'float',
            default: 0,
            nullable: false
        },
        total_checkout_currency: {
            type: 'string',
            maxLength: 3,
            nullable: false,
            default: 'USD'
        },
        refund_total_amount: {
            type: 'number',
            format: 'float',
            default: 0,
            nullable: true
        },
        refund_total_currency: {
            type: 'string',
            maxLength: 3,
            nullable: true,
            default: 'USD'
        },
        search_data: {
            '$ref': '#/components/schemas/SearchData',
            description: 'Search params at the time of booking'
        },
        item_data_raw: {
            type: 'object',
            nullable: true,
            description: 'Raw search result at the time of booking'
        },
        item_data: {
            '$ref': '#/components/schemas/Product',
            description: 'Normalized search result at the time of booking'
        },
        booking_data: {
            '$ref': '#/components/schemas/BookingData',
            description: 'Specific booking data (passengers, seats, room, ...)'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            nullable: false
        },
        payments: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/Payment'
            },
            nullable: true
        }
    }
} as const;

export const $Payment = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        tenant_id: {
            type: 'string',
            nullable: false
        },
        user_id: {
            type: 'string',
            nullable: true
        },
        booking_id: {
            type: 'string',
            nullable: true
        },
        booking_item_id: {
            type: 'string',
            nullable: true
        },
        payment_ref: {
            type: 'string',
            nullable: true
        },
        payment_code: {
            type: 'string',
            nullable: true
        },
        payment_method: {
            type: 'string',
            nullable: true
        },
        payment_gateway: {
            type: 'string',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: true
        },
        type: {
            type: 'string',
            nullable: false
        },
        status: {
            type: 'string',
            enum: ['Pending', '3DS', 'Success', 'Error'],
            default: 'Pending',
            nullable: true
        },
        error: {
            type: 'string',
            nullable: true
        },
        total_amount: {
            type: 'number',
            format: 'float',
            nullable: false
        },
        total_currency: {
            type: 'string',
            maxLength: 3,
            nullable: false,
            default: 'USD'
        },
        card_brand: {
            type: 'string',
            nullable: true
        },
        card_last_four: {
            type: 'string',
            nullable: true
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            nullable: false
        }
    }
} as const;

export const $PaymentGateway = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        scope: {
            type: 'string',
            enum: ['Acquiring', 'Issuing'],
            nullable: false
        },
        name: {
            type: 'string',
            nullable: false
        },
        status: {
            type: 'string',
            enum: ['Active', 'Inactive'],
            default: 'Active'
        }
    }
} as const;

export const $PaymentMethod = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        tenant_id: {
            type: 'string'
        },
        payment_gateway_id: {
            type: 'string'
        },
        scope: {
            type: 'string',
            enum: ['Acquiring', 'Issuing'],
            nullable: false
        },
        name: {
            type: 'string',
            nullable: false
        },
        status: {
            type: 'string',
            enum: ['Active', 'Inactive'],
            default: 'Active'
        },
        payment_gateway: {
            '$ref': '#/components/schemas/PaymentGateway',
            nullable: true
        }
    }
} as const;

export const $Report = {
    type: 'object',
    required: ['name'],
    properties: {
        name: {
            type: 'string'
        },
        pending: {
            type: 'number'
        },
        booked: {
            type: 'number'
        },
        cancelled: {
            type: 'number'
        }
    },
    example: {
        name: 'March 2022',
        pending: 10,
        booked: 8,
        cancelled: 5
    }
} as const;

export const $Role = {
    type: 'object',
    required: ['name', 'type'],
    properties: {
        id: {
            type: 'string',
            nullable: false
        },
        company_id: {
            type: 'string'
        },
        supplier_id: {
            type: 'string'
        },
        type: {
            type: 'string',
            enum: ['admin', 'company', 'supplier']
        },
        name: {
            type: 'string'
        },
        permissions: {
            type: 'string'
        },
        amount_limit: {
            type: 'number'
        }
    }
} as const;

export const $User = {
    type: 'object',
    required: ['first_name', 'last_name', 'email', 'password'],
    properties: {
        id: {
            type: 'number'
        },
        tenant_id: {
            type: 'string'
        },
        first_name: {
            type: 'string'
        },
        last_name: {
            type: 'string'
        },
        email: {
            type: 'string',
            format: 'email'
        },
        email_verified_at: {
            type: 'string',
            format: 'date'
        },
        password: {
            type: 'string'
        },
        phone_number: {
            type: 'string'
        },
        phone_prefix: {
            type: 'string'
        },
        country: {
            type: 'string'
        },
        language: {
            type: 'string',
            default: 'en'
        },
        currency: {
            type: 'string',
            default: 'USD'
        },
        distance: {
            type: 'string',
            default: 'mi'
        }
    }
} as const;

export const $Admin = {
    type: 'object',
    required: ['first_name', 'last_name', 'email', 'password', 'role_id', 'type'],
    properties: {
        id: {
            type: 'number'
        },
        company_id: {
            type: 'string'
        },
        supplier_id: {
            type: 'string'
        },
        role_id: {
            type: 'string'
        },
        type: {
            type: 'string',
            enum: ['admin', 'company', 'supplier']
        },
        status: {
            type: 'string',
            enum: ['Active', 'Inactive'],
            default: 'Active'
        },
        first_name: {
            type: 'string'
        },
        last_name: {
            type: 'string'
        },
        email: {
            type: 'string',
            format: 'email'
        },
        email_verified_at: {
            type: 'string',
            format: 'date'
        },
        password: {
            type: 'string'
        }
    }
} as const;

export const $Log = {
    type: 'object',
    required: ['admin_id', 'action'],
    properties: {
        id: {
            type: 'string'
        },
        action: {
            type: 'string'
        },
        admin_id: {
            type: 'string'
        },
        company_id: {
            type: 'string'
        },
        supplier_id: {
            type: 'string'
        }
    }
} as const;

export const $SmCategory = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        name: {
            type: 'string',
            nullable: false,
            description: 'Localized'
        },
        slug: {
            type: 'string',
            nullable: false
        },
        status: {
            type: 'string',
            enum: ['Active', 'Inactive'],
            nullable: false,
            default: 'Active'
        },
        product_attributes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SmProductAttribute'
            },
            nullable: true
        },
        variant_attributes: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SmProductAttribute'
            },
            nullable: true
        }
    }
} as const;

export const $SmProductAttribute = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        category_id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        name: {
            type: 'string',
            nullable: false
        },
        slug: {
            type: 'string',
            nullable: false
        },
        type: {
            type: 'string',
            enum: ['Short Text', 'Long Text', 'Rich Text', 'Boolean', 'Number', 'Date', 'Time', 'Single Select', 'Multi Select'],
            nullable: false
        },
        options: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: false
        },
        required: {
            type: 'boolean',
            default: false
        },
        localized: {
            type: 'boolean',
            default: false
        },
        filterable: {
            type: 'boolean',
            default: false
        },
        sortable: {
            type: 'boolean',
            default: false
        }
    }
} as const;

export const $SmVariantAttribute = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        category_id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        name: {
            type: 'string',
            nullable: false
        },
        slug: {
            type: 'string',
            nullable: false
        },
        type: {
            type: 'string',
            enum: ['Short Text', 'Long Text', 'Rich Text', 'Boolean', 'Number', 'Date', 'Time', 'Single Select', 'Multi Select'],
            nullable: false
        },
        options: {
            type: 'array',
            items: {
                type: 'string'
            },
            nullable: false
        },
        required: {
            type: 'boolean',
            default: false
        },
        localized: {
            type: 'boolean',
            default: false
        },
        filterable: {
            type: 'boolean',
            default: false
        },
        sortable: {
            type: 'boolean',
            default: false
        }
    }
} as const;

export const $SmSupplier = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        name: {
            type: 'string',
            nullable: false
        },
        description: {
            type: 'string',
            nullable: true
        },
        status: {
            type: 'string',
            enum: ['Active', 'Inactive'],
            nullable: false,
            default: 'Active'
        },
        logo: {
            type: 'string',
            nullable: true
        },
        icon: {
            type: 'string',
            nullable: true
        },
        latitude: {
            type: 'number',
            format: 'float',
            nullable: false
        },
        longitude: {
            type: 'number',
            format: 'float',
            nullable: false
        },
        address: {
            type: 'string',
            nullable: true
        },
        address2: {
            type: 'string',
            nullable: true
        },
        city: {
            type: 'string',
            nullable: true
        },
        state: {
            type: 'string',
            nullable: true
        },
        zip: {
            type: 'string',
            nullable: true
        },
        country: {
            type: 'string',
            nullable: true
        },
        phone_prefix: {
            type: 'string',
            nullable: true
        },
        phone_number: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            nullable: true
        },
        website: {
            type: 'string',
            nullable: true
        },
        payment_method: {
            type: 'string',
            enum: ['Virtual Card', 'Bank Transfer'],
            default: 'Virtual Card',
            nullable: true
        },
        payment_currency: {
            type: 'string',
            maxLength: 3,
            nullable: true,
            default: 'USD'
        },
        commission_agent: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        commission_channel: {
            type: 'number',
            format: 'float',
            nullable: true,
            description: 'Markup for individual static content supplier'
        },
        payout_amount_min: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        payout_interval: {
            type: 'integer',
            minimum: 1,
            nullable: true
        },
        bank_account_name: {
            type: 'string',
            nullable: true
        },
        bank_account_number: {
            type: 'string',
            nullable: true
        },
        bank_account_currency: {
            type: 'string',
            maxLength: 3,
            nullable: true,
            default: 'USD'
        },
        bank_routing_number: {
            type: 'string',
            nullable: true
        },
        bank_name: {
            type: 'string',
            nullable: true
        },
        bank_address: {
            type: 'string',
            nullable: true
        },
        bank_address2: {
            type: 'string',
            nullable: true
        },
        bank_city: {
            type: 'string',
            nullable: true
        },
        bank_state: {
            type: 'string',
            nullable: true
        },
        bank_zip: {
            type: 'string',
            nullable: true
        },
        bank_country: {
            type: 'string',
            nullable: true
        },
        categories: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SmCategory'
            },
            nullable: true
        }
    }
} as const;

export const $SmProduct = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        supplier_id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        category_id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        name: {
            type: 'string',
            nullable: false,
            description: 'Localized'
        },
        description: {
            type: 'number',
            nullable: false,
            description: 'Localized'
        },
        status: {
            type: 'string',
            enum: ['Active', 'Inactive'],
            nullable: false,
            default: 'Active'
        },
        latitude: {
            type: 'number',
            format: 'float',
            nullable: false
        },
        longitude: {
            type: 'number',
            format: 'float',
            nullable: false
        },
        address: {
            type: 'string',
            nullable: false
        },
        address2: {
            type: 'string',
            nullable: false
        },
        city: {
            type: 'string',
            nullable: false
        },
        state: {
            type: 'string',
            nullable: false
        },
        zip: {
            type: 'string',
            nullable: false
        },
        country: {
            type: 'string',
            nullable: false
        },
        cancelation: {
            type: 'string',
            enum: ['Free Cancelation', 'Non Refundable', 'Partially Refundable'],
            nullable: false
        },
        attributes: {
            type: 'array',
            items: {
                type: 'object'
            },
            nullable: true
        },
        distance: {
            type: 'number',
            format: 'float',
            nullable: true
        },
        images: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SmImage'
            },
            nullable: false
        },
        availability: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SmAvailability'
            },
            nullable: true
        }
    }
} as const;

export const $SmVariant = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        supplier_id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        category_id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        product_id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        name: {
            type: 'string',
            nullable: false,
            description: 'Localized'
        },
        description: {
            type: 'number',
            nullable: false,
            description: 'Localized'
        },
        status: {
            type: 'string',
            enum: ['Active', 'Inactive'],
            nullable: false,
            default: 'Active'
        },
        cancelation: {
            type: 'string',
            enum: ['Free Cancelation', 'Non Refundable', 'Partially Refundable'],
            nullable: false
        },
        attributes: {
            type: 'array',
            items: {
                type: 'object'
            },
            nullable: true
        },
        images: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SmImage'
            },
            nullable: false
        },
        availability: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SmAvailability'
            },
            nullable: true
        }
    }
} as const;

export const $SmImage = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        supplier_id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        product_id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        variant_id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        name: {
            type: 'string',
            nullable: false,
            description: 'Localized'
        },
        url: {
            type: 'string',
            nullable: false
        },
        thumbnail: {
            type: 'boolean',
            default: false
        }
    }
} as const;

export const $SmAvailability = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        supplier_id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        product_id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        variant_id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        start_date: {
            type: 'string',
            format: 'date-time',
            nullable: false
        },
        end_date: {
            type: 'string',
            format: 'date-time',
            nullable: false
        },
        type: {
            type: 'string',
            enum: ['Adult', 'Child'],
            nullable: false
        },
        price: {
            type: 'number',
            format: 'float',
            nullable: false
        },
        currency: {
            type: 'string',
            minLength: 3,
            maxLength: 3,
            nullable: false,
            default: 'USD'
        },
        availability: {
            type: 'integer',
            minimum: 0,
            nullable: false
        }
    }
} as const;

export const $SmBooking = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        tenant_id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        supplier_id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        status: {
            type: 'string',
            nullable: false,
            default: 'Pending'
        },
        cancel_reason: {
            type: 'string',
            nullable: true
        },
        total_amount: {
            type: 'number',
            format: 'float',
            nullable: false
        },
        total_currency: {
            type: 'string',
            maxLength: 3,
            nullable: false,
            default: 'USD'
        },
        refund_total_amount: {
            type: 'number',
            format: 'float',
            nullable: false
        },
        refund_total_currency: {
            type: 'string',
            maxLength: 3,
            nullable: false,
            default: 'USD'
        },
        customer_ref: {
            type: 'string',
            nullable: true
        },
        booking_ref: {
            type: 'string',
            nullable: true
        },
        virtual_card_id: {
            type: 'string',
            nullable: true
        },
        first_name: {
            type: 'string',
            nullable: true
        },
        last_name: {
            type: 'string',
            nullable: true
        },
        phone_prefix: {
            type: 'string',
            nullable: true
        },
        phone_number: {
            type: 'string',
            nullable: true
        },
        email: {
            type: 'string',
            format: 'email',
            nullable: false
        },
        country: {
            type: 'string',
            nullable: true
        },
        supplier: {
            '$ref': '#/components/schemas/SmSupplier'
        },
        booking_items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/SmBookingItem'
            },
            nullable: false
        }
    }
} as const;

export const $SmBookingItem = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        tenant_id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        supplier_id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        booking_id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        product_id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        variant_id: {
            type: 'string',
            format: 'uuid',
            nullable: true
        },
        availability_id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        qty: {
            type: 'integer',
            default: 1
        },
        status: {
            type: 'string',
            nullable: false,
            default: 'Pending'
        },
        cancel_reason: {
            type: 'string',
            nullable: true
        },
        total_amount: {
            type: 'number',
            format: 'float',
            nullable: false
        },
        total_currency: {
            type: 'string',
            maxLength: 3,
            nullable: false,
            default: 'USD'
        },
        refund_total_amount: {
            type: 'number',
            format: 'float',
            nullable: false
        },
        refund_total_currency: {
            type: 'string',
            maxLength: 3,
            nullable: false,
            default: 'USD'
        },
        product: {
            '$ref': '#/components/schemas/SmProduct'
        },
        variant: {
            '$ref': '#/components/schemas/SmVariant'
        },
        availability: {
            '$ref': '#/components/schemas/SmAvailability'
        }
    }
} as const;

export const $VirtualCard = {
    type: 'object',
    properties: {
        id: {
            type: 'integer',
            nullable: false
        },
        amount: {
            type: 'number',
            nullable: false
        },
        currency: {
            type: 'string',
            minLength: 3,
            maxLength: 3,
            nullable: false
        },
        card_name: {
            type: 'string',
            nullable: false
        },
        card_number: {
            type: 'string',
            minLength: 16,
            maxLength: 16,
            nullable: false
        },
        card_expiration: {
            type: 'string',
            minLength: 4,
            maxLength: 4,
            nullable: false
        },
        card_sec: {
            type: 'string',
            minLength: 3,
            maxLength: 4,
            nullable: false
        },
        address1: {
            type: 'string',
            nullable: true
        },
        address2: {
            type: 'string',
            nullable: true
        },
        city: {
            type: 'string',
            nullable: true
        },
        state: {
            type: 'string',
            nullable: true
        },
        zipcode: {
            type: 'string',
            nullable: true
        },
        country: {
            type: 'string',
            nullable: true
        },
        payment_gateway: {
            type: 'string',
            nullable: false
        }
    }
} as const;

export const $LogBooking = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        booking_item_id: {
            type: 'string',
            format: 'uuid',
            description: 'Associated booking_item id',
            nullable: true
        },
        url: {
            type: 'string',
            description: 'Request URL',
            nullable: true
        },
        headers: {
            type: 'object',
            description: 'Request headers',
            nullable: true
        },
        request: {
            type: 'object',
            description: 'Request body',
            nullable: true
        },
        response: {
            type: 'object',
            description: 'Response',
            nullable: true
        }
    }
} as const;

export const $LogPayment = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            nullable: false
        },
        payment_id: {
            type: 'string',
            format: 'uuid',
            description: 'Associated payment id',
            nullable: true
        },
        url: {
            type: 'string',
            description: 'Request URL',
            nullable: true
        },
        headers: {
            type: 'object',
            description: 'Request headers',
            nullable: true
        },
        request: {
            type: 'object',
            description: 'Request body',
            nullable: true
        },
        response: {
            type: 'object',
            description: 'Response',
            nullable: true
        }
    }
} as const;

export const $Token = {
    type: 'object',
    properties: {
        token: {
            type: 'string'
        },
        expires: {
            type: 'string',
            format: 'date-time'
        }
    }
} as const;

export const $AuthTokens = {
    type: 'object',
    properties: {
        access: {
            '$ref': '#/components/schemas/Token'
        },
        refresh: {
            '$ref': '#/components/schemas/Token'
        }
    }
} as const;

export const $Error = {
    type: 'object',
    properties: {
        code: {
            type: 'number'
        },
        message: {
            type: 'string'
        }
    }
} as const;