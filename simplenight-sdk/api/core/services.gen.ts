// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { ConfigWebFindOneData, ConfigWebFindOneResponse, ConfigMobileFindOneData, ConfigMobileFindOneResponse, HotelsSearchData, HotelsSearchResponse, HotelsSearchPollData, HotelsSearchPollResponse, HotelsDetailsData, HotelsDetailsResponse, HotelsSearchSuggestionsData, HotelsSearchSuggestionsResponse, FlightsSearchData, FlightsSearchResponse, FlightsSearchPollData, FlightsSearchPollResponse, FlightsDetailsData, FlightsDetailsResponse, CarsSearchData, CarsSearchResponse, CarsSearchPollData, CarsSearchPollResponse, CarsSearchSuggestionsData, CarsSearchSuggestionsResponse, CarsDetailsData, CarsDetailsResponse, ThingsSearchData, ThingsSearchResponse, ThingsSearchPollData, ThingsSearchPollResponse, ThingsSearchSuggestionsData, ThingsSearchSuggestionsResponse, ThingsDetailsData, ThingsDetailsResponse, DiningSearchData, DiningSearchResponse, DiningSearchPollData, DiningSearchPollResponse, DiningSearchSuggestionsData, DiningSearchSuggestionsResponse, DiningDetailsData, DiningDetailsResponse, ParkingSearchData, ParkingSearchResponse, ParkingSearchPollData, ParkingSearchPollResponse, ParkingSearchSuggestionsData, ParkingSearchSuggestionsResponse, ParkingDetailsData, ParkingDetailsResponse, ShowsSearchData, ShowsSearchResponse, ShowsSearchPollData, ShowsSearchPollResponse, ShowsSearchSuggestionsData, ShowsSearchSuggestionsResponse, ShowsDetailsData, ShowsDetailsResponse, TransportationSearchData, TransportationSearchResponse, TransportationSearchPollData, TransportationSearchPollResponse, TransportationSearchSuggestionsData, TransportationSearchSuggestionsResponse, TransportationDetailsData, TransportationDetailsResponse, AuthUserControllerCheckData, AuthUserControllerCheckResponse, AuthUserControllerLoginData, AuthUserControllerLoginResponse, AuthUserControllerRefreshResponse, BookingsSendTestEmailResponse, CartsFindOneData, CartsFindOneResponse } from './types.gen';

export class ConfigService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get Config Web
     * No description
     * @param data The data for the request.
     * @param data.language Content language
     * @param data.tenantId Tenant Id
     * @param data.hostname Hostname
     * @returns ConfigWebFindOneResponseDto Success
     * @throws ApiError
     */
    public configWebFindOne(data: ConfigWebFindOneData): CancelablePromise<ConfigWebFindOneResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/config-web',
            query: {
                tenant_id: data.tenantId,
                hostname: data.hostname,
                language: data.language
            },
            errors: {
                400: 'Bad request'
            }
        });
    }
    
    /**
     * Get Config Mobile
     * No description
     * @param data The data for the request.
     * @param data.language Content language
     * @param data.tenantId Tenant Id
     * @param data.hostname Hostname
     * @returns ConfigMobileFindOneResponseDto Success
     * @throws ApiError
     */
    public configMobileFindOne(data: ConfigMobileFindOneData): CancelablePromise<ConfigMobileFindOneResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/config-mobile',
            query: {
                tenant_id: data.tenantId,
                hostname: data.hostname,
                language: data.language
            },
            errors: {
                400: 'Bad request'
            }
        });
    }
    
}

export class ProductsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Hotels - Search
     * No description
     * @param data The data for the request.
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns HotelsSearchResponseDto Created
     * @throws ApiError
     */
    public hotelsSearch(data: HotelsSearchData): CancelablePromise<HotelsSearchResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/products/hotels/search',
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Hotels - Search Poll
     * No description
     * @param data The data for the request.
     * @param data.searchId
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns HotelsSearchPollResponseDto Success
     * @throws ApiError
     */
    public hotelsSearchPoll(data: HotelsSearchPollData): CancelablePromise<HotelsSearchPollResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/products/hotels/search/poll/{searchId}',
            path: {
                searchId: data.searchId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Hotels - Get details
     * No description
     * @param data The data for the request.
     * @param data.productId
     * @param data.language Content language.
     * @param data.currency Currency code.
     * @param data.uom Unit of measure (km or mi).
     * @param data.xApiKey Tenant API token header
     * @param data.startLocation Search point coordinates
     * @param data.startDate
     * @param data.endDate
     * @param data.adults
     * @param data.children List of ages
     * @param data.rooms
     * @param data.raw Debug mode. Return raw data without normalization. Dev only.
     * @param data.authorization User Bearer JWT token
     * @returns HotelsDetailsResponseDto Success
     * @throws ApiError
     */
    public hotelsDetails(data: HotelsDetailsData): CancelablePromise<HotelsDetailsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/products/hotels/{productId}',
            path: {
                productId: data.productId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom,
                start_location: data.startLocation,
                start_date: data.startDate,
                end_date: data.endDate,
                adults: data.adults,
                children: data.children,
                rooms: data.rooms,
                raw: data.raw
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Hotels - Search Similar Hotels
     * No description
     * @param data The data for the request.
     * @param data.productId
     * @param data.language Content language.
     * @param data.currency Currency code.
     * @param data.uom Unit of measure (km or mi).
     * @param data.xApiKey Tenant API token header
     * @param data.limit
     * @param data.authorization User Bearer JWT token
     * @returns HotelsSuggestionsResponseDto Success
     * @throws ApiError
     */
    public hotelsSearchSuggestions(data: HotelsSearchSuggestionsData): CancelablePromise<HotelsSearchSuggestionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/products/hotels/{productId}/suggestions',
            path: {
                productId: data.productId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom,
                limit: data.limit
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Flights - Search
     * No description
     * @param data The data for the request.
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns FlightsSearchResponseDto Created
     * @throws ApiError
     */
    public flightsSearch(data: FlightsSearchData): CancelablePromise<FlightsSearchResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/products/flights/search',
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Flights - Search Poll
     * No description
     * @param data The data for the request.
     * @param data.searchId
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns FlightsSearchPollResponseDto Success
     * @throws ApiError
     */
    public flightsSearchPoll(data: FlightsSearchPollData): CancelablePromise<FlightsSearchPollResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/products/flights/search/poll/{searchId}',
            path: {
                searchId: data.searchId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Flights - Get details
     * No description
     * @param data The data for the request.
     * @param data.productId
     * @param data.language Content language.
     * @param data.currency Currency code.
     * @param data.uom Unit of measure (km or mi).
     * @param data.details Include detailed information.
     * @param data.availability Include availability information.
     * @param data.seatmaps Include seatmaps.
     * @param data.xApiKey Tenant API token header
     * @param data.startDate
     * @param data.endDate
     * @param data.adults
     * @param data.children List of ages
     * @param data.rooms
     * @param data.raw Debug mode. Return raw data without normalization. Dev only.
     * @param data.authorization User Bearer JWT token
     * @returns FlightsDetailsResponseDto Success
     * @throws ApiError
     */
    public flightsDetails(data: FlightsDetailsData): CancelablePromise<FlightsDetailsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/products/flights/{productId}',
            path: {
                productId: data.productId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom,
                start_date: data.startDate,
                end_date: data.endDate,
                adults: data.adults,
                children: data.children,
                rooms: data.rooms,
                details: data.details,
                availability: data.availability,
                seatmaps: data.seatmaps,
                raw: data.raw
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Cars - Search
     * No description
     * @param data The data for the request.
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns CarsSearchResponseDto Created
     * @throws ApiError
     */
    public carsSearch(data: CarsSearchData): CancelablePromise<CarsSearchResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/products/car-rental/search',
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Cars - Search Poll
     * No description
     * @param data The data for the request.
     * @param data.searchId
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns CarsSearchPollResponseDto Success
     * @throws ApiError
     */
    public carsSearchPoll(data: CarsSearchPollData): CancelablePromise<CarsSearchPollResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/products/car-rental/search/poll/{searchId}',
            path: {
                searchId: data.searchId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Cars - Search Similar Cars
     * No description
     * @param data The data for the request.
     * @param data.productId
     * @param data.language Content language.
     * @param data.currency Currency code.
     * @param data.uom Unit of measure (km or mi).
     * @param data.xApiKey Tenant API token header
     * @param data.limit
     * @param data.authorization User Bearer JWT token
     * @returns CarsSuggestionsResponseDto Success
     * @throws ApiError
     */
    public carsSearchSuggestions(data: CarsSearchSuggestionsData): CancelablePromise<CarsSearchSuggestionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/products/car-rental/{productId}/suggestions',
            path: {
                productId: data.productId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom,
                limit: data.limit
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Cars - Get details
     * No description
     * @param data The data for the request.
     * @param data.productId
     * @param data.language Content language.
     * @param data.currency Currency code.
     * @param data.uom Unit of measure (km or mi).
     * @param data.xApiKey Tenant API token header
     * @param data.startDate
     * @param data.endDate
     * @param data.adults
     * @param data.children List of ages
     * @param data.details
     * @param data.raw Debug mode. Return raw data without normalization. Dev only.
     * @param data.authorization User Bearer JWT token
     * @returns CarsDetailsResponseDto Success
     * @throws ApiError
     */
    public carsDetails(data: CarsDetailsData): CancelablePromise<CarsDetailsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/products/car-rental/{productId}',
            path: {
                productId: data.productId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom,
                start_date: data.startDate,
                end_date: data.endDate,
                adults: data.adults,
                children: data.children,
                details: data.details,
                raw: data.raw
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Things To Do - Search
     * No description
     * @param data The data for the request.
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns ThingsSearchResponseDto Created
     * @throws ApiError
     */
    public thingsSearch(data: ThingsSearchData): CancelablePromise<ThingsSearchResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/products/things-to-do/search',
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Things To Do - Search Poll
     * No description
     * @param data The data for the request.
     * @param data.searchId
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns ThingsSearchPollResponseDto Success
     * @throws ApiError
     */
    public thingsSearchPoll(data: ThingsSearchPollData): CancelablePromise<ThingsSearchPollResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/products/things-to-do/search/poll/{searchId}',
            path: {
                searchId: data.searchId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Things To Do - Get Similar Items
     * No description
     * @param data The data for the request.
     * @param data.productId
     * @param data.language Content language.
     * @param data.currency Currency code.
     * @param data.uom Unit of measure (km or mi).
     * @param data.xApiKey Tenant API token header
     * @param data.limit
     * @param data.authorization User Bearer JWT token
     * @returns ThingsSuggestionsResponseDto Success
     * @throws ApiError
     */
    public thingsSearchSuggestions(data: ThingsSearchSuggestionsData): CancelablePromise<ThingsSearchSuggestionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/products/things-to-do/{productId}/suggestions',
            path: {
                productId: data.productId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom,
                limit: data.limit
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Things To Do - Get details
     * No description
     * @param data The data for the request.
     * @param data.productId
     * @param data.language Content language.
     * @param data.currency Currency code.
     * @param data.uom Unit of measure (km or mi).
     * @param data.availabilityDate
     * @param data.availabilityAdults
     * @param data.availabilityChildren
     * @param data.xApiKey Tenant API token header
     * @param data.details
     * @param data.availability
     * @param data.bookingQuestions
     * @param data.raw Debug mode. Return raw data without normalization. Dev only.
     * @param data.authorization User Bearer JWT token
     * @returns ThingsDetailsResponseDto Success
     * @throws ApiError
     */
    public thingsDetails(data: ThingsDetailsData): CancelablePromise<ThingsDetailsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/products/things-to-do/{productId}',
            path: {
                productId: data.productId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom,
                details: data.details,
                availability: data.availability,
                availability_date: data.availabilityDate,
                availability_adults: data.availabilityAdults,
                availability_children: data.availabilityChildren,
                booking_questions: data.bookingQuestions,
                raw: data.raw
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Dining - Search
     * No description
     * @param data The data for the request.
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns DiningSearchResponseDto Created
     * @throws ApiError
     */
    public diningSearch(data: DiningSearchData): CancelablePromise<DiningSearchResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/products/dining/search',
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Dining - Search Poll
     * No description
     * @param data The data for the request.
     * @param data.searchId
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns DiningSearchPollResponseDto Success
     * @throws ApiError
     */
    public diningSearchPoll(data: DiningSearchPollData): CancelablePromise<DiningSearchPollResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/products/dining/search/poll/{searchId}',
            path: {
                searchId: data.searchId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Dining - Search Similar Restaurants
     * No description
     * @param data The data for the request.
     * @param data.productId
     * @param data.language Content language.
     * @param data.currency Currency code.
     * @param data.uom Unit of measure (km or mi).
     * @param data.xApiKey Tenant API token header
     * @param data.limit
     * @param data.authorization User Bearer JWT token
     * @returns DiningSuggestionsResponseDto Success
     * @throws ApiError
     */
    public diningSearchSuggestions(data: DiningSearchSuggestionsData): CancelablePromise<DiningSearchSuggestionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/products/dining/{productId}/suggestions',
            path: {
                productId: data.productId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom,
                limit: data.limit
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Dining - Get details
     * No description
     * @param data The data for the request.
     * @param data.productId
     * @param data.language Content language.
     * @param data.currency Currency code.
     * @param data.uom Unit of measure (km or mi).
     * @param data.availabilityDate
     * @param data.availabilityAdults
     * @param data.availabilityChildren
     * @param data.xApiKey Tenant API token header
     * @param data.details
     * @param data.availability
     * @param data.raw Debug mode. Return raw data without normalization. Dev only.
     * @param data.authorization User Bearer JWT token
     * @returns DiningDetailsResponseDto Success
     * @throws ApiError
     */
    public diningDetails(data: DiningDetailsData): CancelablePromise<DiningDetailsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/products/dining/{productId}',
            path: {
                productId: data.productId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom,
                details: data.details,
                availability: data.availability,
                availability_date: data.availabilityDate,
                availability_adults: data.availabilityAdults,
                availability_children: data.availabilityChildren,
                raw: data.raw
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Parking - Search
     * No description
     * @param data The data for the request.
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns ParkingSearchResponseDto Created
     * @throws ApiError
     */
    public parkingSearch(data: ParkingSearchData): CancelablePromise<ParkingSearchResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/products/parking/search',
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Parking - Search Poll
     * No description
     * @param data The data for the request.
     * @param data.searchId
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns ParkingSearchPollResponseDto Success
     * @throws ApiError
     */
    public parkingSearchPoll(data: ParkingSearchPollData): CancelablePromise<ParkingSearchPollResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/products/parking/search/poll/{searchId}',
            path: {
                searchId: data.searchId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Parking - Search Similar Parking
     * No description
     * @param data The data for the request.
     * @param data.productId
     * @param data.language Content language.
     * @param data.currency Currency code.
     * @param data.uom Unit of measure (km or mi).
     * @param data.xApiKey Tenant API token header
     * @param data.limit
     * @param data.authorization User Bearer JWT token
     * @returns ParkingSuggestionsResponseDto Success
     * @throws ApiError
     */
    public parkingSearchSuggestions(data: ParkingSearchSuggestionsData): CancelablePromise<ParkingSearchSuggestionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/products/parking/{productId}/suggestions',
            path: {
                productId: data.productId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom,
                limit: data.limit
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Parking - Get details
     * No description
     * @param data The data for the request.
     * @param data.productId
     * @param data.language Content language.
     * @param data.currency Currency code.
     * @param data.uom Unit of measure (km or mi).
     * @param data.xApiKey Tenant API token header
     * @param data.details
     * @param data.availability
     * @param data.bookingQuestions
     * @param data.raw Debug mode. Return raw data without normalization. Dev only.
     * @param data.authorization User Bearer JWT token
     * @returns ParkingDetailsResponseDto Success
     * @throws ApiError
     */
    public parkingDetails(data: ParkingDetailsData): CancelablePromise<ParkingDetailsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/products/parking/{productId}',
            path: {
                productId: data.productId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom,
                details: data.details,
                availability: data.availability,
                bookingQuestions: data.bookingQuestions,
                raw: data.raw
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Shows - Search
     * No description
     * @param data The data for the request.
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns ShowsSearchResponseDto Created
     * @throws ApiError
     */
    public showsSearch(data: ShowsSearchData): CancelablePromise<ShowsSearchResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/products/shows-and-events/search',
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Shows - Search Poll
     * No description
     * @param data The data for the request.
     * @param data.searchId
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns ShowsSearchPollResponseDto Success
     * @throws ApiError
     */
    public showsSearchPoll(data: ShowsSearchPollData): CancelablePromise<ShowsSearchPollResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/products/shows-and-events/search/poll/{searchId}',
            path: {
                searchId: data.searchId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Shows - Search Similar Restaurants
     * No description
     * @param data The data for the request.
     * @param data.productId
     * @param data.language Content language.
     * @param data.currency Currency code.
     * @param data.uom Unit of measure (km or mi).
     * @param data.xApiKey Tenant API token header
     * @param data.limit
     * @param data.authorization User Bearer JWT token
     * @returns ShowsSuggestionsResponseDto Success
     * @throws ApiError
     */
    public showsSearchSuggestions(data: ShowsSearchSuggestionsData): CancelablePromise<ShowsSearchSuggestionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/products/shows-and-events/{productId}/suggestions',
            path: {
                productId: data.productId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom,
                limit: data.limit
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Shows - Get details
     * No description
     * @param data The data for the request.
     * @param data.productId
     * @param data.language Content language.
     * @param data.currency Currency code.
     * @param data.uom Unit of measure (km or mi).
     * @param data.xApiKey Tenant API token header
     * @param data.raw Debug mode. Return raw data without normalization. Dev only.
     * @param data.authorization User Bearer JWT token
     * @returns ShowsDetailsResponseDto Success
     * @throws ApiError
     */
    public showsDetails(data: ShowsDetailsData): CancelablePromise<ShowsDetailsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/products/shows-and-events/{productId}',
            path: {
                productId: data.productId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom,
                raw: data.raw
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Transportation - Search
     * No description
     * @param data The data for the request.
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns TransportationSearchResponseDto Created
     * @throws ApiError
     */
    public transportationSearch(data: TransportationSearchData): CancelablePromise<TransportationSearchResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/products/transportation/search',
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Transportation - Search Poll
     * No description
     * @param data The data for the request.
     * @param data.searchId
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns TransportationSearchPollResponseDto Success
     * @throws ApiError
     */
    public transportationSearchPoll(data: TransportationSearchPollData): CancelablePromise<TransportationSearchPollResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/products/transportation/search/poll/{searchId}',
            path: {
                searchId: data.searchId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Transportation - Search Similar Restaurants
     * No description
     * @param data The data for the request.
     * @param data.productId
     * @param data.language Content language.
     * @param data.currency Currency code.
     * @param data.uom Unit of measure (km or mi).
     * @param data.xApiKey Tenant API token header
     * @param data.limit
     * @param data.authorization User Bearer JWT token
     * @returns TransportationSuggestionsResponseDto Success
     * @throws ApiError
     */
    public transportationSearchSuggestions(data: TransportationSearchSuggestionsData): CancelablePromise<TransportationSearchSuggestionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/products/transportation/{productId}/suggestions',
            path: {
                productId: data.productId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom,
                limit: data.limit
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Transportation - Get details
     * No description
     * @param data The data for the request.
     * @param data.productId
     * @param data.language Content language.
     * @param data.currency Currency code.
     * @param data.uom Unit of measure (km or mi).
     * @param data.xApiKey Tenant API token header
     * @param data.details
     * @param data.raw Debug mode. Return raw data without normalization. Dev only.
     * @param data.authorization User Bearer JWT token
     * @returns TransportationDetailsResponseDto Success
     * @throws ApiError
     */
    public transportationDetails(data: TransportationDetailsData): CancelablePromise<TransportationDetailsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/products/transportation/{productId}',
            path: {
                productId: data.productId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom,
                details: data.details,
                raw: data.raw
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
}

export class AuthUserService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get current user
     * @param data The data for the request.
     * @param data.authorization User Bearer JWT token
     * @returns UserResponseDto Success
     * @throws ApiError
     */
    public authUserControllerCheck(data: AuthUserControllerCheckData): CancelablePromise<AuthUserControllerCheckResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/commerce/v1/auth',
            headers: {
                Authorization: data.authorization
            },
            errors: {
                400: 'Bad request: Data validation failed',
                401: 'Unauthorized: JWT token not valid'
            }
        });
    }
    
    /**
     * Login as user
     * @param data The data for the request.
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @returns UserLoginResponseDto Success
     * @throws ApiError
     */
    public authUserControllerLogin(data: AuthUserControllerLoginData): CancelablePromise<AuthUserControllerLoginResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/commerce/v1/auth/login',
            headers: {
                'x-api-key': data.xApiKey
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                401: 'Unauthorized: apiKey, email or password did not match'
            }
        });
    }
    
    /**
     * Refresh user JWT tokens
     * @returns UserRefreshResponseDto Success
     * @throws ApiError
     */
    public authUserControllerRefresh(): CancelablePromise<AuthUserControllerRefreshResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/commerce/v1/auth/refresh-tokens',
            errors: {
                400: 'Bad request: data validation failed',
                401: 'Unauthorized: refresh token is not valid'
            }
        });
    }
    
}

export class BookingsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Send test email
     * No description
     * @returns unknown Success
     * @throws ApiError
     */
    public bookingsSendTestEmail(): CancelablePromise<BookingsSendTestEmailResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/commerce/bookings/send-test-email',
            errors: {
                400: 'Bad request'
            }
        });
    }
    
}

export class CartService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Cart - Find one
     * No description
     * @param data The data for the request.
     * @param data.cartId
     * @param data.currency Currency code.
     * @param data.xApiKey Tenant API token header
     * @param data.authorization User Bearer JWT token
     * @returns CartsFindOneResponseDto Success
     * @throws ApiError
     */
    public cartsFindOne(data: CartsFindOneData): CancelablePromise<CartsFindOneResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/carts/{cartId}',
            path: {
                cartId: data.cartId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            query: {
                currency: data.currency
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
}