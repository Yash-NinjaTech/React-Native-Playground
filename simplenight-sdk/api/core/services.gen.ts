// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { UsersMeData, UsersMeResponse, UsersDeleteMeData, UsersDeleteMeResponse, UsersCreateData, UsersCreateResponse, UsersUpdateData, UsersUpdateResponse, ConfigWebFindOneData, ConfigWebFindOneResponse, ConfigMobileFindOneData, ConfigMobileFindOneResponse, HotelsSearchData, HotelsSearchResponse, HotelsSearchPollData, HotelsSearchPollResponse, HotelsDetailsData, HotelsDetailsResponse, HotelsSearchSuggestionsData, HotelsSearchSuggestionsResponse, FlightsSearchData, FlightsSearchResponse, FlightsSearchPollData, FlightsSearchPollResponse, FlightsDetailsData, FlightsDetailsResponse, CarsSearchData, CarsSearchResponse, CarsSearchPollData, CarsSearchPollResponse, CarsSearchSuggestionsData, CarsSearchSuggestionsResponse, CarsDetailsData, CarsDetailsResponse, ThingsSearchData, ThingsSearchResponse, ThingsSearchPollData, ThingsSearchPollResponse, ThingsSearchSuggestionsData, ThingsSearchSuggestionsResponse, ThingsDetailsData, ThingsDetailsResponse, DiningSearchData, DiningSearchResponse, DiningSearchPollData, DiningSearchPollResponse, DiningSearchSuggestionsData, DiningSearchSuggestionsResponse, DiningDetailsData, DiningDetailsResponse, ParkingSearchData, ParkingSearchResponse, ParkingSearchPollData, ParkingSearchPollResponse, ParkingSearchSuggestionsData, ParkingSearchSuggestionsResponse, ParkingDetailsData, ParkingDetailsResponse, ShowsSearchData, ShowsSearchResponse, ShowsSearchPollData, ShowsSearchPollResponse, ShowsSearchSuggestionsData, ShowsSearchSuggestionsResponse, ShowsDetailsData, ShowsDetailsResponse, TransportationSearchData, TransportationSearchResponse, TransportationSearchPollData, TransportationSearchPollResponse, TransportationSearchSuggestionsData, TransportationSearchSuggestionsResponse, TransportationDetailsData, TransportationDetailsResponse, AuthUserLoginData, AuthUserLoginResponse, AuthUserRefreshTokenData, AuthUserRefreshTokenResponse, AuthUserVerifyEmailData, AuthUserVerifyEmailResponse, AuthUserResendVerificationEmailData, AuthUserResendVerificationEmailResponse, AuthUserForgotPasswordData, AuthUserForgotPasswordResponse, AuthUserConfirmResetPasswordData, AuthUserConfirmResetPasswordResponse, AuthUserLogoutData, AuthUserLogoutResponse, BookingsCreateData, BookingsCreateResponse, BookingsUserBookingsData, BookingsUserBookingsResponse, BookingsFindOneData, BookingsFindOneResponse, BookingsResumeData, BookingsResumeResponse, BookingsCancelData, BookingsCancelResponse, BookingsCancelItemData, BookingsCancelItemResponse, BookingsFindBookingData, BookingsFindBookingResponse, BookingsSendTestEmailResponse, CartsFindOneData, CartsFindOneResponse, CartsUpdateData, CartsUpdateResponse, CartsCreateData, CartsCreateResponse, CartItemsCreateData, CartItemsCreateResponse, CartItemsDeleteData, CartItemsDeleteResponse, LocationsSearchData, LocationsSearchResponse, LocationsGetByIdData, LocationsGetByIdResponse } from './types.gen';

export class UsersService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Get me
     * Get current user
     * @param data The data for the request.
     * @param data.xApiKey Tenant API token header
     * @param data.authorization User Bearer JWT token
     * @returns UsersMeResponseDto Success
     * @throws ApiError
     */
    public usersMe(data: UsersMeData): CancelablePromise<UsersMeResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/users/me',
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: JWT token not valid'
            }
        });
    }
    
    /**
     * Delete me
     * Delete current user
     * @param data The data for the request.
     * @param data.xApiKey Tenant API token header
     * @param data.authorization User Bearer JWT token
     * @returns void No content
     * @throws ApiError
     */
    public usersDeleteMe(data: UsersDeleteMeData): CancelablePromise<UsersDeleteMeResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v1/users/me',
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: JWT token not valid'
            }
        });
    }
    
    /**
     * Create
     * Create a new user
     * @param data The data for the request.
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @returns UsersCreateResponseDto Created
     * @throws ApiError
     */
    public usersCreate(data: UsersCreateData): CancelablePromise<UsersCreateResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/users/create',
            headers: {
                'x-api-key': data.xApiKey
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: no x-api-key provided'
            }
        });
    }
    
    /**
     * Update
     * Update user or change password if provided
     * @param data The data for the request.
     * @param data.userId
     * @param data.xApiKey Tenant API token header
     * @param data.authorization User Bearer JWT token
     * @param data.requestBody
     * @returns UsersUpdateResponseDto Success
     * @throws ApiError
     */
    public usersUpdate(data: UsersUpdateData): CancelablePromise<UsersUpdateResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/api/v1/users/{userId}',
            path: {
                userId: data.userId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: JWT token not valid'
            }
        });
    }
    
}

export class ConfigWebService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Find one
     * Gen web configuration for tenant
     * @param data The data for the request.
     * @param data.language Content language
     * @param data.tenantId Tenant Id
     * @param data.hostname Hostname
     * @returns ConfigWebFindOneResponseDto Success
     * @throws ApiError
     */
    public configWebFindOne(data: ConfigWebFindOneData): CancelablePromise<ConfigWebFindOneResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/config-web',
            query: {
                tenant_id: data.tenantId,
                hostname: data.hostname,
                language: data.language
            },
            errors: {
                400: 'Bad request'
            }
        });
    }
    
}

export class ConfigMobileService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Find one
     * Gen mobile configuration for tenant
     * @param data The data for the request.
     * @param data.language Content language
     * @param data.tenantId Tenant Id
     * @param data.hostname Hostname
     * @returns ConfigMobileFindOneResponseDto Success
     * @throws ApiError
     */
    public configMobileFindOne(data: ConfigMobileFindOneData): CancelablePromise<ConfigMobileFindOneResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/config-mobile',
            query: {
                tenant_id: data.tenantId,
                hostname: data.hostname,
                language: data.language
            },
            errors: {
                400: 'Bad request'
            }
        });
    }
    
}

export class ProductsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Hotels - Search
     * No description
     * @param data The data for the request.
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns HotelsSearchResponseDto Created
     * @throws ApiError
     */
    public hotelsSearch(data: HotelsSearchData): CancelablePromise<HotelsSearchResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/products/hotels/search',
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Hotels - Search Poll
     * No description
     * @param data The data for the request.
     * @param data.searchId
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns HotelsSearchPollResponseDto Success
     * @throws ApiError
     */
    public hotelsSearchPoll(data: HotelsSearchPollData): CancelablePromise<HotelsSearchPollResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/products/hotels/search/poll/{searchId}',
            path: {
                searchId: data.searchId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Hotels - Get details
     * No description
     * @param data The data for the request.
     * @param data.productId
     * @param data.language Content language.
     * @param data.currency Currency code.
     * @param data.uom Unit of measure (km or mi).
     * @param data.xApiKey Tenant API token header
     * @param data.startLocation Search point coordinates
     * @param data.startDate
     * @param data.endDate
     * @param data.adults
     * @param data.children List of ages
     * @param data.rooms
     * @param data.raw Debug mode. Return raw data without normalization. Dev only.
     * @param data.authorization User Bearer JWT token
     * @returns HotelsDetailsResponseDto Success
     * @throws ApiError
     */
    public hotelsDetails(data: HotelsDetailsData): CancelablePromise<HotelsDetailsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/products/hotels/{productId}',
            path: {
                productId: data.productId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom,
                start_location: data.startLocation,
                start_date: data.startDate,
                end_date: data.endDate,
                adults: data.adults,
                children: data.children,
                rooms: data.rooms,
                raw: data.raw
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid',
                404: ''
            }
        });
    }
    
    /**
     * Hotels - Search Similar Hotels
     * No description
     * @param data The data for the request.
     * @param data.productId
     * @param data.language Content language.
     * @param data.currency Currency code.
     * @param data.uom Unit of measure (km or mi).
     * @param data.xApiKey Tenant API token header
     * @param data.limit
     * @param data.authorization User Bearer JWT token
     * @returns HotelsSuggestionsResponseDto Success
     * @throws ApiError
     */
    public hotelsSearchSuggestions(data: HotelsSearchSuggestionsData): CancelablePromise<HotelsSearchSuggestionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/products/hotels/{productId}/suggestions',
            path: {
                productId: data.productId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom,
                limit: data.limit
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Flights - Search
     * No description
     * @param data The data for the request.
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns FlightsSearchResponseDto Created
     * @throws ApiError
     */
    public flightsSearch(data: FlightsSearchData): CancelablePromise<FlightsSearchResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/products/flights/search',
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Flights - Search Poll
     * No description
     * @param data The data for the request.
     * @param data.searchId
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns FlightsSearchPollResponseDto Success
     * @throws ApiError
     */
    public flightsSearchPoll(data: FlightsSearchPollData): CancelablePromise<FlightsSearchPollResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/products/flights/search/poll/{searchId}',
            path: {
                searchId: data.searchId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Flights - Get details
     * No description
     * @param data The data for the request.
     * @param data.productId
     * @param data.language Content language.
     * @param data.currency Currency code.
     * @param data.uom Unit of measure (km or mi).
     * @param data.details Include detailed information.
     * @param data.availability Include availability information.
     * @param data.seatmaps Include seatmaps.
     * @param data.xApiKey Tenant API token header
     * @param data.startDate
     * @param data.endDate
     * @param data.adults
     * @param data.children List of ages
     * @param data.rooms
     * @param data.raw Debug mode. Return raw data without normalization. Dev only.
     * @param data.authorization User Bearer JWT token
     * @returns FlightsDetailsResponseDto Success
     * @throws ApiError
     */
    public flightsDetails(data: FlightsDetailsData): CancelablePromise<FlightsDetailsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/products/flights/{productId}',
            path: {
                productId: data.productId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom,
                start_date: data.startDate,
                end_date: data.endDate,
                adults: data.adults,
                children: data.children,
                rooms: data.rooms,
                details: data.details,
                availability: data.availability,
                seatmaps: data.seatmaps,
                raw: data.raw
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid',
                404: ''
            }
        });
    }
    
    /**
     * Cars - Search
     * No description
     * @param data The data for the request.
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns CarsSearchResponseDto Created
     * @throws ApiError
     */
    public carsSearch(data: CarsSearchData): CancelablePromise<CarsSearchResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/products/car-rental/search',
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Cars - Search Poll
     * No description
     * @param data The data for the request.
     * @param data.searchId
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns CarsSearchPollResponseDto Success
     * @throws ApiError
     */
    public carsSearchPoll(data: CarsSearchPollData): CancelablePromise<CarsSearchPollResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/products/car-rental/search/poll/{searchId}',
            path: {
                searchId: data.searchId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Cars - Search Similar Cars
     * No description
     * @param data The data for the request.
     * @param data.productId
     * @param data.language Content language.
     * @param data.currency Currency code.
     * @param data.uom Unit of measure (km or mi).
     * @param data.xApiKey Tenant API token header
     * @param data.limit
     * @param data.authorization User Bearer JWT token
     * @returns CarsSuggestionsResponseDto Success
     * @throws ApiError
     */
    public carsSearchSuggestions(data: CarsSearchSuggestionsData): CancelablePromise<CarsSearchSuggestionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/products/car-rental/{productId}/suggestions',
            path: {
                productId: data.productId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom,
                limit: data.limit
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Cars - Get details
     * No description
     * @param data The data for the request.
     * @param data.productId
     * @param data.language Content language.
     * @param data.currency Currency code.
     * @param data.uom Unit of measure (km or mi).
     * @param data.xApiKey Tenant API token header
     * @param data.startDate
     * @param data.endDate
     * @param data.adults
     * @param data.children List of ages
     * @param data.details
     * @param data.raw Debug mode. Return raw data without normalization. Dev only.
     * @param data.authorization User Bearer JWT token
     * @returns CarsDetailsResponseDto Success
     * @throws ApiError
     */
    public carsDetails(data: CarsDetailsData): CancelablePromise<CarsDetailsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/products/car-rental/{productId}',
            path: {
                productId: data.productId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom,
                start_date: data.startDate,
                end_date: data.endDate,
                adults: data.adults,
                children: data.children,
                details: data.details,
                raw: data.raw
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid',
                404: ''
            }
        });
    }
    
    /**
     * Things To Do - Search
     * No description
     * @param data The data for the request.
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns ThingsSearchResponseDto Created
     * @throws ApiError
     */
    public thingsSearch(data: ThingsSearchData): CancelablePromise<ThingsSearchResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/products/things-to-do/search',
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Things To Do - Search Poll
     * No description
     * @param data The data for the request.
     * @param data.searchId
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns ThingsSearchPollResponseDto Success
     * @throws ApiError
     */
    public thingsSearchPoll(data: ThingsSearchPollData): CancelablePromise<ThingsSearchPollResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/products/things-to-do/search/poll/{searchId}',
            path: {
                searchId: data.searchId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Things To Do - Get Similar Items
     * No description
     * @param data The data for the request.
     * @param data.productId
     * @param data.language Content language.
     * @param data.currency Currency code.
     * @param data.uom Unit of measure (km or mi).
     * @param data.xApiKey Tenant API token header
     * @param data.limit
     * @param data.authorization User Bearer JWT token
     * @returns ThingsSuggestionsResponseDto Success
     * @throws ApiError
     */
    public thingsSearchSuggestions(data: ThingsSearchSuggestionsData): CancelablePromise<ThingsSearchSuggestionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/products/things-to-do/{productId}/suggestions',
            path: {
                productId: data.productId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom,
                limit: data.limit
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Things To Do - Get details
     * No description
     * @param data The data for the request.
     * @param data.productId
     * @param data.language Content language.
     * @param data.currency Currency code.
     * @param data.uom Unit of measure (km or mi).
     * @param data.availabilityDate
     * @param data.availabilityAdults
     * @param data.availabilityChildren
     * @param data.xApiKey Tenant API token header
     * @param data.details
     * @param data.availability
     * @param data.bookingQuestions
     * @param data.raw Debug mode. Return raw data without normalization. Dev only.
     * @param data.authorization User Bearer JWT token
     * @returns ThingsDetailsResponseDto Success
     * @throws ApiError
     */
    public thingsDetails(data: ThingsDetailsData): CancelablePromise<ThingsDetailsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/products/things-to-do/{productId}',
            path: {
                productId: data.productId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom,
                details: data.details,
                availability: data.availability,
                availability_date: data.availabilityDate,
                availability_adults: data.availabilityAdults,
                availability_children: data.availabilityChildren,
                booking_questions: data.bookingQuestions,
                raw: data.raw
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid',
                404: ''
            }
        });
    }
    
    /**
     * Dining - Search
     * No description
     * @param data The data for the request.
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns DiningSearchResponseDto Created
     * @throws ApiError
     */
    public diningSearch(data: DiningSearchData): CancelablePromise<DiningSearchResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/products/dining/search',
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Dining - Search Poll
     * No description
     * @param data The data for the request.
     * @param data.searchId
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns DiningSearchPollResponseDto Success
     * @throws ApiError
     */
    public diningSearchPoll(data: DiningSearchPollData): CancelablePromise<DiningSearchPollResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/products/dining/search/poll/{searchId}',
            path: {
                searchId: data.searchId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Dining - Search Similar Restaurants
     * No description
     * @param data The data for the request.
     * @param data.productId
     * @param data.language Content language.
     * @param data.currency Currency code.
     * @param data.uom Unit of measure (km or mi).
     * @param data.xApiKey Tenant API token header
     * @param data.limit
     * @param data.authorization User Bearer JWT token
     * @returns DiningSuggestionsResponseDto Success
     * @throws ApiError
     */
    public diningSearchSuggestions(data: DiningSearchSuggestionsData): CancelablePromise<DiningSearchSuggestionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/products/dining/{productId}/suggestions',
            path: {
                productId: data.productId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom,
                limit: data.limit
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Dining - Get details
     * No description
     * @param data The data for the request.
     * @param data.productId
     * @param data.language Content language.
     * @param data.currency Currency code.
     * @param data.uom Unit of measure (km or mi).
     * @param data.availabilityDate
     * @param data.availabilityAdults
     * @param data.availabilityChildren
     * @param data.xApiKey Tenant API token header
     * @param data.details
     * @param data.availability
     * @param data.raw Debug mode. Return raw data without normalization. Dev only.
     * @param data.authorization User Bearer JWT token
     * @returns DiningDetailsResponseDto Success
     * @throws ApiError
     */
    public diningDetails(data: DiningDetailsData): CancelablePromise<DiningDetailsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/products/dining/{productId}',
            path: {
                productId: data.productId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom,
                details: data.details,
                availability: data.availability,
                availability_date: data.availabilityDate,
                availability_adults: data.availabilityAdults,
                availability_children: data.availabilityChildren,
                raw: data.raw
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid',
                404: ''
            }
        });
    }
    
    /**
     * Parking - Search
     * No description
     * @param data The data for the request.
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns ParkingSearchResponseDto Created
     * @throws ApiError
     */
    public parkingSearch(data: ParkingSearchData): CancelablePromise<ParkingSearchResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/products/parking/search',
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Parking - Search Poll
     * No description
     * @param data The data for the request.
     * @param data.searchId
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns ParkingSearchPollResponseDto Success
     * @throws ApiError
     */
    public parkingSearchPoll(data: ParkingSearchPollData): CancelablePromise<ParkingSearchPollResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/products/parking/search/poll/{searchId}',
            path: {
                searchId: data.searchId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Parking - Search Similar Parking
     * No description
     * @param data The data for the request.
     * @param data.productId
     * @param data.language Content language.
     * @param data.currency Currency code.
     * @param data.uom Unit of measure (km or mi).
     * @param data.xApiKey Tenant API token header
     * @param data.limit
     * @param data.authorization User Bearer JWT token
     * @returns ParkingSuggestionsResponseDto Success
     * @throws ApiError
     */
    public parkingSearchSuggestions(data: ParkingSearchSuggestionsData): CancelablePromise<ParkingSearchSuggestionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/products/parking/{productId}/suggestions',
            path: {
                productId: data.productId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom,
                limit: data.limit
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Parking - Get details
     * No description
     * @param data The data for the request.
     * @param data.productId
     * @param data.language Content language.
     * @param data.currency Currency code.
     * @param data.uom Unit of measure (km or mi).
     * @param data.xApiKey Tenant API token header
     * @param data.details
     * @param data.availability
     * @param data.bookingQuestions
     * @param data.raw Debug mode. Return raw data without normalization. Dev only.
     * @param data.authorization User Bearer JWT token
     * @returns ParkingDetailsResponseDto Success
     * @throws ApiError
     */
    public parkingDetails(data: ParkingDetailsData): CancelablePromise<ParkingDetailsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/products/parking/{productId}',
            path: {
                productId: data.productId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom,
                details: data.details,
                availability: data.availability,
                bookingQuestions: data.bookingQuestions,
                raw: data.raw
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid',
                404: ''
            }
        });
    }
    
    /**
     * Shows - Search
     * No description
     * @param data The data for the request.
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns ShowsSearchResponseDto Created
     * @throws ApiError
     */
    public showsSearch(data: ShowsSearchData): CancelablePromise<ShowsSearchResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/products/shows-and-events/search',
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Shows - Search Poll
     * No description
     * @param data The data for the request.
     * @param data.searchId
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns ShowsSearchPollResponseDto Success
     * @throws ApiError
     */
    public showsSearchPoll(data: ShowsSearchPollData): CancelablePromise<ShowsSearchPollResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/products/shows-and-events/search/poll/{searchId}',
            path: {
                searchId: data.searchId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Shows - Search Similar Restaurants
     * No description
     * @param data The data for the request.
     * @param data.productId
     * @param data.language Content language.
     * @param data.currency Currency code.
     * @param data.uom Unit of measure (km or mi).
     * @param data.xApiKey Tenant API token header
     * @param data.limit
     * @param data.authorization User Bearer JWT token
     * @returns ShowsSuggestionsResponseDto Success
     * @throws ApiError
     */
    public showsSearchSuggestions(data: ShowsSearchSuggestionsData): CancelablePromise<ShowsSearchSuggestionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/products/shows-and-events/{productId}/suggestions',
            path: {
                productId: data.productId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom,
                limit: data.limit
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Shows - Get details
     * No description
     * @param data The data for the request.
     * @param data.productId
     * @param data.language Content language.
     * @param data.currency Currency code.
     * @param data.uom Unit of measure (km or mi).
     * @param data.xApiKey Tenant API token header
     * @param data.raw Debug mode. Return raw data without normalization. Dev only.
     * @param data.authorization User Bearer JWT token
     * @returns ShowsDetailsResponseDto Success
     * @throws ApiError
     */
    public showsDetails(data: ShowsDetailsData): CancelablePromise<ShowsDetailsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/products/shows-and-events/{productId}',
            path: {
                productId: data.productId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom,
                raw: data.raw
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid',
                404: ''
            }
        });
    }
    
    /**
     * Transportation - Search
     * No description
     * @param data The data for the request.
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns TransportationSearchResponseDto Created
     * @throws ApiError
     */
    public transportationSearch(data: TransportationSearchData): CancelablePromise<TransportationSearchResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/products/transportation/search',
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Transportation - Search Poll
     * No description
     * @param data The data for the request.
     * @param data.searchId
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns TransportationSearchPollResponseDto Success
     * @throws ApiError
     */
    public transportationSearchPoll(data: TransportationSearchPollData): CancelablePromise<TransportationSearchPollResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/products/transportation/search/poll/{searchId}',
            path: {
                searchId: data.searchId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Transportation - Search Similar Restaurants
     * No description
     * @param data The data for the request.
     * @param data.productId
     * @param data.language Content language.
     * @param data.currency Currency code.
     * @param data.uom Unit of measure (km or mi).
     * @param data.xApiKey Tenant API token header
     * @param data.limit
     * @param data.authorization User Bearer JWT token
     * @returns TransportationSuggestionsResponseDto Success
     * @throws ApiError
     */
    public transportationSearchSuggestions(data: TransportationSearchSuggestionsData): CancelablePromise<TransportationSearchSuggestionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/products/transportation/{productId}/suggestions',
            path: {
                productId: data.productId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom,
                limit: data.limit
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Transportation - Get details
     * No description
     * @param data The data for the request.
     * @param data.productId
     * @param data.language Content language.
     * @param data.currency Currency code.
     * @param data.uom Unit of measure (km or mi).
     * @param data.xApiKey Tenant API token header
     * @param data.details
     * @param data.raw Debug mode. Return raw data without normalization. Dev only.
     * @param data.authorization User Bearer JWT token
     * @returns TransportationDetailsResponseDto Success
     * @throws ApiError
     */
    public transportationDetails(data: TransportationDetailsData): CancelablePromise<TransportationDetailsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/products/transportation/{productId}',
            path: {
                productId: data.productId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            query: {
                language: data.language,
                currency: data.currency,
                uom: data.uom,
                details: data.details,
                raw: data.raw
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid',
                404: ''
            }
        });
    }
    
}

export class AuthService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Login
     * Login with email and password
     * @param data The data for the request.
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @returns UserLoginResponseDto Success
     * @throws ApiError
     */
    public authUserLogin(data: AuthUserLoginData): CancelablePromise<AuthUserLoginResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/auth/login',
            headers: {
                'x-api-key': data.xApiKey
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: no x-api-key provided'
            }
        });
    }
    
    /**
     * Refresh Token
     * Refresh access token with refresh token
     * @param data The data for the request.
     * @param data.xApiKey Tenant API token header
     * @returns UserRefreshResponseDto Success
     * @throws ApiError
     */
    public authUserRefreshToken(data: AuthUserRefreshTokenData): CancelablePromise<AuthUserRefreshTokenResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/auth/refresh-token',
            headers: {
                'x-api-key': data.xApiKey
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: refresh token is not valid'
            }
        });
    }
    
    /**
     * Verify Email
     * Send verification email to user
     * @param data The data for the request.
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @returns UserVerifyEmailResponseDto Success
     * @throws ApiError
     */
    public authUserVerifyEmail(data: AuthUserVerifyEmailData): CancelablePromise<AuthUserVerifyEmailResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/auth/verify-email',
            headers: {
                'x-api-key': data.xApiKey
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: no x-api-key provided'
            }
        });
    }
    
    /**
     * Resend Verification Email
     * Resend verification email to user
     * @param data The data for the request.
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @returns UserResendVerificationEmailResponseDto Success
     * @throws ApiError
     */
    public authUserResendVerificationEmail(data: AuthUserResendVerificationEmailData): CancelablePromise<AuthUserResendVerificationEmailResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/auth/resend-verification-email',
            headers: {
                'x-api-key': data.xApiKey
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: no x-api-key provided'
            }
        });
    }
    
    /**
     * Forgot Password
     * Send reset password email to user
     * @param data The data for the request.
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @returns UserForgotPasswordResponseDto Success
     * @throws ApiError
     */
    public authUserForgotPassword(data: AuthUserForgotPasswordData): CancelablePromise<AuthUserForgotPasswordResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/auth/forgot-password',
            headers: {
                'x-api-key': data.xApiKey
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: no x-api-key provided'
            }
        });
    }
    
    /**
     * Confirm Reset Password
     * Confirm reset password
     * @param data The data for the request.
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @returns UserConfirmResetPasswordResponseDto Success
     * @throws ApiError
     */
    public authUserConfirmResetPassword(data: AuthUserConfirmResetPasswordData): CancelablePromise<AuthUserConfirmResetPasswordResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/auth/confirm-reset-password',
            headers: {
                'x-api-key': data.xApiKey
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: no x-api-key provided'
            }
        });
    }
    
    /**
     * Logout
     * Logout user
     * @param data The data for the request.
     * @param data.xApiKey Tenant API token header
     * @param data.authorization User Bearer JWT token
     * @param data.requestBody
     * @returns UserLogoutResponseDto Success
     * @throws ApiError
     */
    public authUserLogout(data: AuthUserLogoutData): CancelablePromise<AuthUserLogoutResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/auth/logout',
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: JWT token not valid'
            }
        });
    }
    
}

export class BookingsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Create
     * Create a new booking
     * @param data The data for the request.
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns BookingsCreateResponseDto Success
     * @throws ApiError
     */
    public bookingsCreate(data: BookingsCreateData): CancelablePromise<BookingsCreateResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/bookings',
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * User bookings
     * Get user bookings
     * @param data The data for the request.
     * @param data.currency
     * @param data.xApiKey Tenant API token header
     * @param data.authorization User Bearer JWT token
     * @param data.status
     * @param data.startDate
     * @param data.endDate
     * @param data.sort
     * @param data.limit
     * @param data.page
     * @returns BookingsUserBookingsResponseDto Success
     * @throws ApiError
     */
    public bookingsUserBookings(data: BookingsUserBookingsData): CancelablePromise<BookingsUserBookingsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/bookings/user',
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            query: {
                currency: data.currency,
                status: data.status,
                start_date: data.startDate,
                end_date: data.endDate,
                sort: data.sort,
                limit: data.limit,
                page: data.page
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: JWT token not valid'
            }
        });
    }
    
    /**
     * Find one
     * Get booking by id
     * @param data The data for the request.
     * @param data.bookingId
     * @param data.currency Currency code.
     * @param data.xApiKey Tenant API token header
     * @param data.authorization User Bearer JWT token
     * @returns BookingsFindOneResponseDto Success
     * @throws ApiError
     */
    public bookingsFindOne(data: BookingsFindOneData): CancelablePromise<BookingsFindOneResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/bookings/{bookingId}',
            path: {
                bookingId: data.bookingId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            query: {
                currency: data.currency
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Resume
     * Resume a booking after 3DSecure
     * @param data The data for the request.
     * @param data.bookingId
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns BookingsResumeResponseDto Success
     * @throws ApiError
     */
    public bookingsResume(data: BookingsResumeData): CancelablePromise<BookingsResumeResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/bookings/{bookingId}/resume',
            path: {
                bookingId: data.bookingId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Cancel
     * Cancel a booking
     * @param data The data for the request.
     * @param data.bookingId
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns BookingsCancelResponseDto Success
     * @throws ApiError
     */
    public bookingsCancel(data: BookingsCancelData): CancelablePromise<BookingsCancelResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/bookings/{bookingId}/cancel',
            path: {
                bookingId: data.bookingId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Cancel item
     * Cancel a booking item
     * @param data The data for the request.
     * @param data.bookingId
     * @param data.bookingItemId
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns BookingsCancelItemResponseDto Success
     * @throws ApiError
     */
    public bookingsCancelItem(data: BookingsCancelItemData): CancelablePromise<BookingsCancelItemResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/bookings/{bookingId}/items/{bookingItemId}/cancel',
            path: {
                bookingId: data.bookingId,
                bookingItemId: data.bookingItemId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Find booking
     * Find booking item
     * @param data The data for the request.
     * @param data.currency Currency code.
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns BookingsFindBookingResponseDto Success
     * @throws ApiError
     */
    public bookingsFindBooking(data: BookingsFindBookingData): CancelablePromise<BookingsFindBookingResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/bookings/find',
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            query: {
                currency: data.currency
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Send test email (temp)
     * No description
     * @returns unknown Success
     * @throws ApiError
     */
    public bookingsSendTestEmail(): CancelablePromise<BookingsSendTestEmailResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/bookings/send-test-email',
            errors: {
                400: 'Bad request'
            }
        });
    }
    
}

export class CartsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Find one
     * Get cart by id
     * @param data The data for the request.
     * @param data.cartId
     * @param data.currency Currency code.
     * @param data.xApiKey Tenant API token header
     * @param data.authorization User Bearer JWT token
     * @returns CartsFindOneResponseDto Success
     * @throws ApiError
     */
    public cartsFindOne(data: CartsFindOneData): CancelablePromise<CartsFindOneResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/carts/{cartId}',
            path: {
                cartId: data.cartId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            query: {
                currency: data.currency
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid',
                404: ''
            }
        });
    }
    
    /**
     * Update
     * Update a cart
     * @param data The data for the request.
     * @param data.cartId
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns CartsUpdateResponseDto Success
     * @throws ApiError
     */
    public cartsUpdate(data: CartsUpdateData): CancelablePromise<CartsUpdateResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/api/v1/carts/{cartId}',
            path: {
                cartId: data.cartId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Create
     * Create a new cart
     * @param data The data for the request.
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns CartsCreateResponseDto Created
     * @throws ApiError
     */
    public cartsCreate(data: CartsCreateData): CancelablePromise<CartsCreateResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/carts',
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Create Item
     * Create a new item in the cart
     * @param data The data for the request.
     * @param data.cartId
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns CartItemsCreateResponseDto Created
     * @throws ApiError
     */
    public cartItemsCreate(data: CartItemsCreateData): CancelablePromise<CartItemsCreateResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/carts/{cartId}/items',
            path: {
                cartId: data.cartId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid'
            }
        });
    }
    
    /**
     * Delete Item
     * Delete an item from the cart
     * @param data The data for the request.
     * @param data.cartId
     * @param data.cartItemId
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.authorization User Bearer JWT token
     * @returns CartItemsDeleteResponseDto Success
     * @throws ApiError
     */
    public cartItemsDelete(data: CartItemsDeleteData): CancelablePromise<CartItemsDeleteResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api/v1/carts/{cartId}/items/{cartItemId}',
            path: {
                cartId: data.cartId,
                cartItemId: data.cartItemId
            },
            headers: {
                'x-api-key': data.xApiKey,
                Authorization: data.authorization
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: user jwt token is invalid',
                404: ''
            }
        });
    }
    
}

export class LocationsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Search Locations
     * Find locations by keyword and type
     * @param data The data for the request.
     * @param data.xApiKey Tenant API token header
     * @param data.requestBody
     * @param data.language
     * @returns LocationsSearchResponseDto Success
     * @throws ApiError
     */
    public locationsSearch(data: LocationsSearchData): CancelablePromise<LocationsSearchResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api/v1/locations/search',
            headers: {
                'x-api-key': data.xApiKey
            },
            query: {
                language: data.language
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: no x-api-key provided'
            }
        });
    }
    
    /**
     * Get Location
     * Find location by ID
     * @param data The data for the request.
     * @param data.locationId
     * @param data.xApiKey Tenant API token header
     * @returns LocationsGetByIdResponseDto Success
     * @throws ApiError
     */
    public locationsGetById(data: LocationsGetByIdData): CancelablePromise<LocationsGetByIdResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api/v1/locations/{locationId}',
            path: {
                locationId: data.locationId
            },
            headers: {
                'x-api-key': data.xApiKey
            },
            errors: {
                400: 'Bad request',
                401: 'Unauthorized: no x-api-key provided'
            }
        });
    }
    
}